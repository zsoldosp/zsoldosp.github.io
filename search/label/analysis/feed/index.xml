<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Do. Reflect. Learn. Repeat!</title>
    <link>http://blog.zsoldosp.eu</link>
    <description>Excercises in public learning</description>
    <pubDate>Sun, 15 Nov 2015 12:01:00 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Book Review - Exploring Everyday Things with Ruby and R by Sau Sheong Chang</title>
      <link>http://blog.zsoldosp.eu/2012/10/book-review-exploring-everyday-things.html</link>
      <pubDate>Thu, 25 Oct 2012 19:47:00 CEST</pubDate>
      <category><![CDATA[software]]></category>
      <category><![CDATA[data]]></category>
      <category><![CDATA[book review]]></category>
      <category><![CDATA[analysis]]></category>
      <category><![CDATA[simulation]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2012/10/book-review-exploring-everyday-things.html</guid>
      <description>Book Review - Exploring Everyday Things with Ruby and R by Sau Sheong Chang</description>
      <content:encoded><![CDATA[
          
<div style="text-align: center;"><img alt="Book cover image" src="http://akamaicovers.oreilly.com/images/9781449315153/s.gif" title=""/>Â </div><br/>Disclaimer: I received a free (electronic) copy of this ebook (<a href="http://shop.oreilly.com/product/0636920022626.do">Exploring Everyday Things with Ruby and R by Sau Sheong Chang</a>) from <a href="http://oreilly.com/">O'Reilly</a> as part of the <a href="http://oreilly.com/bloggers">O'Reilly Blogger Review Program</a>, which also requires me to write a review about it. That aside, I would have purchased this book this year anyway, and would have reviewed it on this blog too.<br/><h2>About me and why I read this book</h2>I have been programming professionally for about 8 years, mainly business applications and reporting, so I already have quite some love for data. While I haven't used math much in my day jobs, I liked (and was good at) it in high school, including taking extra classes - so I have learned basic statistics. Refreshing and advancing my data analytics skills is one of my goals this year, and reading this book was part of that plan - I have heard that R is one of the most powerful languages for statistical analysis currently available.<br/><h2>About the book</h2>The book is written assuming basic understanding of programming and sets two goals: <br/><ul><li>to awaken the curiosity in the reader to go out and explore things and search for explanation, models, and experiments to validate understanding; </li><li>to show you some basic, but practical R and Ruby.</li></ul>While the author intended each chapter to be more or less self sufficient, I have found it to be better read sequentially, especially the simulation chapters.<br/><h3>Ruby</h3>I had no trouble with the code examples, even though I have only programmed about half an hour total in my life in Ruby. Beware that the only knowledge you gain about Ruby is the bare minimum required, so you'll have to put aside your thirst for complete understanding of the language and its ecosystem. If you need to have a proper understanding to work in a language (which I don't think is necessary), you are better off either reading a Ruby book first or using your favorite language to obtain the data - the code is easy to port.<br/><h3>Making me curious</h3>I have had a lot of wow/a-ha moments, both about the topics chosen for discussion as well as the math/algorithmic ideas. You may find that you disagree with some of the conclusion the author draws, and it is emphasized during the introduction that the goal of the book is not to convince you about these conclusions, but to demonstrate the journey from question to conclusion in order to equip you with tools to enable you doing the same. This is mostly achieved. <br/>I award extra bonus points for mentioning the limitations of the used analytical tools - I don't think I would trust any book/article/blog post which presents something without its downsides!<br/>Not all examples are exactly everyday (e.g.: an analysis of going to work by car vs. public transportation would have been more everyday than how to simulate the flocking of birds), but they cover a wide breath of topics. The processing and analysis of the data is always challenging enough, plus your general knowledge is expanded.<br/>One thing I was missing is a description of a really important part - being a layman, how do I go about finding which algorithms to use? While it isn't a book about Research 101, a description of the search process would have been great. You can of course always google, but when entering a new topic I find guided search helpful - which are some of the trick keywords, which sites to prefer/avoid, etc. On the other hand, enough methods are described that just properly learning and understanding them would make me a much better statistician already. Once done with that I could just fall back reading through the R packages and methods, hoping that if I have seen a word before it would emerge from my passive knowledge when I'm faced with a matching problem.<br/><h3>The R language</h3>The book does a solid job to help you get started. It demonstrates enough language features to enable to you experiment with it for work projects (e.g.: use MySql as a datasource, create packages, etc.); points out the R component/library hubs to look for community packages; and recommends further learning resources. <br/>The <a href="https://github.com/sausheong/everyday">code examples</a> are like most programming book snippets - procedural, (mostly) everything is located in a single method/script. Not a tangled-spaghetti mess that makes one despise it in legacy code, only it makes for a lower signal/noise ratio and requires more effort from the reader. Guess its a genre problem, so if you have read other programming books, you shouldn't have any problems with this one. <br/><blockquote>Technical comment: the ebook isn't formatted to play nice with the Kindle DX, and while in print the code block might be only broken between left &amp; right pages, on the kindle it makes for awkward read.</blockquote>The exposed APIs suggest that R is a bit too ceremonial for my taste, but that could be abstracted away for the project that warrants R's use. I have also used a number of visually great .NET UI third party components that were a pain to work with from a programmer's perspective, yet helped us create a great product. Plus things that feel alien first become second nature after enough practice, so it isn't a big deal. I plan to take a look at NumPy as well, and defer the decision whether to dive deeper into R (possibly via using <a href="http://www.dotnetrocks.com/default.aspx?showNum=813">F# 3.0 type providers for R</a>).<br/><h3>Overall</h3>The book hasn't left me in awe, but it didn't feel like a chore to read as some other books. I got the taste of R that I wanted when I picked up my copy to read. On top of that, I have learned about fun things, and it also added books to my reading (wish)list (e.g.: <a href="http://www.amazon.com/The-Grammar-Graphics-Statistics-Computing/dp/0387245448/">The Grammar of Graphics by Leland Wilkinson</a>, <a href="http://www.amazon.com/Armchair-Economist-Economics-Everyday-Life/dp/1451651732/">Armchair Economist by Stephen E. Landsburg</a>, and more). This is no definitive guide on R, but to wet your appetite and get you started, it is a good one I can recommend without reservations.
          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2012/10/book-review-exploring-everyday-things.html">Book Review - Exploring Everyday Things with Ruby and R by Sau Sheong Chang</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
    <item>
      <title>About the export-to-Excel Anti-Pattern</title>
      <link>http://blog.zsoldosp.eu/2011/07/about-export-to-excel-anti-pattern.html</link>
      <pubDate>Tue, 19 Jul 2011 08:00:00 CEST</pubDate>
      <category><![CDATA[user experience]]></category>
      <category><![CDATA[anti-pattern]]></category>
      <category><![CDATA[analysis]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2011/07/about-export-to-excel-anti-pattern.html</guid>
      <description>About the export-to-Excel Anti-Pattern</description>
      <content:encoded><![CDATA[
          
<p>Excel is a wonderful ad hoc data analysis tool for non-programmers, and is also often <a href="http://lostechies.com/jimmybogard/2010/09/08/natural-selection-in-it/">the first milestone in the software evolution</a>. No wonder export to excel is the most common feature requested for business applications (some people even go as far as not developing a GUI at all, but just write Excel plugins).</p><br/> <p>The recent <a href="http://codebetter.com/iancooper/2011/07/15/why-crud-might-be-what-they-want-but-may-not-be-what-they-need/">CRUD vs Task Based UI</a> touches this issue, but focuses heavily on CRUD - and this problem is applicable to other types of applications (<em>all</em> applications have reports). The problem with the Excel export in any application is that <strong>important business activity happens outside the software</strong>. So when your users almost "beg" for a spreadsheet export, it's a strong clue that some aspect of the business process is not modelled, and our users likely perform some mundane, manual work - and IT is supposed to automate that!</p><br/> <p>Some examples I've run into (non exhaustive list!):<br/> <ul><br/> <li>users were reconciling data from two sources, but it took <a href="http://en.wikipedia.org/wiki/5_Whys">three-four Whys</a> to figure that out. And even after the discovery and the agreed automation solution I had to promise there will be an excel export feature (more on that later)!</li><br/> <li>users were manually looking for errors - turned out that adding a single filter to an existing report provided the same functionality.</li><br/> </ul><br/> </p><br/> <p>Excel centric business processes indicate communication and trust problems - the business doesn't ask for features, and the developers don't know what their users do with the delivered software. There could be many reasons for that (organizational, bad experience, high turnover, etc.), but beware - and if you spot it, try to act to make the situation better.</p><br/> <p>I used to joke with users (now I believe it seriously) that my role as a developer is to force them to figure out and document (software is a form of executable documentation of a business process after all) their work processes, and enforce that for the future. Much better than a paper/Word based new hire getting started guide!<br/> <p>However, <strong>exporting to Excel is a feature business applications should have</strong>, possibly for every list/graph we have in the system. Some of the tasks don't have the <a href="http://en.wikipedia.org/wiki/Return_on_Investment">ROI</a> that would justify the development of a given new feature/report/etc., and giving users direct access to the data is more enabling (think <strong>innovation</strong>) than if they had to ask IT every single time they wanted to check something (the more hurdles we put up, the less likely they'll be to check, potentially damaging the business). We should <strong>monitor</strong> these exports, and look for patterns (potentially across screens), and when a pattern emerges, talk to our users about how we could make life easier for them. A few occasions don't warrant a development project, and we don't want to develop something too early (just like with refactoring - wait for the pattern to emerge before you prematurely refactor to a structure that hinders later development).</p></p>
          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2011/07/about-export-to-excel-anti-pattern.html">About the export-to-Excel Anti-Pattern</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
  </channel>
</rss>
