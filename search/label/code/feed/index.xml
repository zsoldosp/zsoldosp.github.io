<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Do. Reflect. Learn. Repeat!</title>
    <link>http://blog.zsoldosp.eu</link>
    <description>Excercises in public learning</description>
    <pubDate>Wed, 11 Sep 2013 15:21:02 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Quick script to help reporting bugs for python</title>
      <link>http://blog.zsoldosp.eu/2013/09/11/quick-script-to-help-reporting-bugs-for-python/</link>
      <pubDate>Wed, 11 Sep 2013 17:00:00 CEST</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[note to self]]></category>
      <category><![CDATA[bash]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">-y0sMmjTXW82o3McTP9I6l_Hh4k=</guid>
      <description>Quick script to help reporting bugs for python</description>
      <content:encoded><![CDATA[<div class="document">
<p>While poking around the
<a class="reference external" href="https://pypi.python.org/pypi/testrepository/">testrepository</a>
package I ran into the cryptic error message of <strong>'unicodeescape'
codec can't decode bytes in position 56-57: truncated \uXXXX escape</strong>.
I set out to reproduce the bug, but that is of course an iterative
process, like anything else in coding, so I set out to script it. Since
I expect I'll need this again, and someone else might need it too,
I'm recording it here.</p>
<div class="note">
<p class="first admonition-title">Note</p>
<p>I eventually figured out the problem was that <a class="reference external" href="http://testrepository.readthedocs.org/en/latest/MANUAL.html#python">the recommended
default for testrepository</a>
has a different command line behavior from the built in unittest's
runner:</p>
<blockquote>
<ul class="simple">
<li><tt class="docutils literal">python <span class="pre">-m</span> unittest discover bugrepro</tt></li>
<li><tt class="docutils literal">testr run bugrepro</tt> doesn't get translated to the discover
root, but into <tt class="docutils literal">LISTOPT</tt> variable (<tt class="docutils literal">python <span class="pre">-m</span> subunit.run
discover . $LISTOPT $IDOPTION</tt>)</li>
</ul>
</blockquote>
<p class="last">Sure, a nicer exception message would have been nice.</p>
</div>
<div class="section" id="my-environment">
<h1>My Environment</h1>
<p>While for serious development I use Linux VMs, for explorations/hobbies,
I use the base Windows 7 on my command line from git-bash - it's enough
for basic scripting things, plus I tend to use git anyway, and I don't
like Powershell.</p>
</div>
<div class="section" id="the-script">
<h1>The script</h1>
<pre class="code bash literal-block">
<span class="c">#!/bin/sh
</span><span class="k">function </span>d<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&quot;\$ $*&quot;</span>
    <span class="nv">$*</span>
<span class="o">}</span>

<span class="k">function </span>win_info<span class="o">()</span> <span class="o">{</span>
    systeminfo | grep <span class="s2">&quot;\(OS Name\|OS Manufacturer\|System Type\|Locale\)&quot;</span>
<span class="o">}</span>

<span class="nv">REPRO_FOLDER</span><span class="o">=</span>bugrepro
d win_info
d python --version
d pip freeze
d git --version
d grep ^ -nH <span class="sb">`</span>find <span class="nv">$REPRO_FOLDER</span> -name <span class="se">\*</span>.py<span class="sb">`</span>
d python -m unittest discover <span class="nv">$REPRO_FOLDER</span>
d ls .testr* -l
d cat .testr.conf
d testr run <span class="nv">$REPRO_FOLDER</span>
d testr run
</pre>
<p>Running <tt class="docutils literal">./bugrepro.sh <span class="pre">2&gt;&amp;1</span> | tee bugrepro.txt&nbsp; &gt; /dev/null</tt> produces
the following output (cropped, you can see
<a class="reference external" href="/snippets/bugrepro.txt">the full output here</a>):</p>
<pre class="literal-block">
$ win_info
OS Name:                   Microsoft Windows 7 Professional 
OS Manufacturer:           Microsoft Corporation
System Type:               x64-based PC
System Locale:             en-us;English (United States)
Input Locale:              en-us;English (United States)
$ python --version
Python 2.7.4
$ pip freeze
extras==0.0.3

</pre>
</div>
<div class="section" id="things-i-learned">
<h1>Things I learned</h1>
<p>While this took somewhat longer than expected (and writing this
post wasn't even planned!) and I haven't even reported the actual
bug yet (Yak shaving...), but I don't mind - especially because I
did all this while recovering from a nasty cold :)</p>
<ul class="simple">
<li>for <tt class="docutils literal">cmd.exe</tt>, the <tt class="docutils literal">ver</tt> and <tt class="docutils literal">systeminfo</tt> commands are pretty neat
and <a class="reference external" href="http://www.windows7password.net/all-windows-7-commands-cmd-exe/">there are more commands</a>:
type <tt class="docutils literal">help</tt></li>
<li>wrote my first blog post in
<a class="reference external" href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>
since it's a better fit for including snippets (<a class="reference external" href="/2010/08/executable-documentation.html/">executable
documentation</a> is a pet peeve of mine!)</li>
</ul>
<p><strong>Open Questions</strong> (aka: do I want to shave further yaks?!):</p>
<ul>
<li><p class="first"><tt class="docutils literal">cmd.exe /C</tt> doesn't seem to behave as one would expect it when
invoked from git-bash (msysgit, 1.8.1) - it doesn't exit and the
execution to continue requires an <tt class="docutils literal">exit</tt> command!</p>
</li>
<li><p class="first">I always want to do
<a class="reference external" href="/2013/07/25/some-metaprogramming-reflection-in-bash/">metaprogramming in bash</a>
- how could I display
the body of a bash function? I'm thinking of something similar to
what one does with alias</p>
<pre class="code bash literal-block">
<span class="nv">$ </span><span class="nb">alias </span><span class="nv">foo</span><span class="o">=</span><span class="s1">'echo foo'</span>
<span class="nv">$ </span>foo
foo
<span class="nv">$ </span><span class="nb">alias </span>foo
<span class="nb">alias </span><span class="nv">foo</span><span class="o">=</span><span class="s1">'echo foo'</span>
</pre>
</li>
<li><p class="first">is there a better way for passing arguments in bash? I ended up doing
<tt class="docutils literal">grep ^</tt> because I went crazy trying to escape
<tt class="docutils literal"><span class="pre">find...</span> <span class="pre">-exec...\;</span></tt>.
and making the script use <tt class="docutils literal"><span class="pre">#!/bin/bash</span> <span class="pre">-x</span></tt> would be an overkill
here, and I just want to echo back the command that was executed...</p>
</li>
</ul>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Some Metaprogramming (Reflection) In Bash</title>
      <link>http://blog.zsoldosp.eu/2013/07/25/some-metaprogramming-reflection-in-bash/</link>
      <pubDate>Thu, 25 Jul 2013 08:18:00 CEST</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[metaprogramming]]></category>
      <category><![CDATA[bash]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">SrLBQ0AP18Vcd0lyROK5o6cmGI0=</guid>
      <description>Some Metaprogramming (Reflection) In Bash</description>
      <content:encoded><![CDATA[<p>I needed to write a function in bash that would set an environment 
variable to that value, unless the variable has been already set. 
This is a typical metaprogramming (reflection, introspection, etc.) 
task. </p>
<p>However, searching for the terms I know (reflection, metaprogramming) 
did not yield any bash results, since the bash terminology is <em>variable
variable</em> or <em>dereferencing</em>. I hope the title of this post will help
other non-native bash script writers searching for the "wrong" keywords!</p>
<p>The trick is the <code>${!&lt;variable name&gt;}</code> construct - it will be interpreted
as <code>${&lt;variable name's value&gt;}</code>. An example</p>
<pre><code>$ a="aaaaa"
$ b="bbbbb"
$ echo $a
aaaaa
$ echo $b
bbbbb
$ variable_name="a"
$ echo ${!variable_name}
aaaaa
$ variable_name="b"
$ echo ${!variable_name}
bbbbb
</code></pre>
<p>Of course, I could only find it offline (thanks, <a href="https://www.xing.com/profiles/Dieter_Loskarn">Dieter</a>!). 
Armed with this kowledge, the function itself becomes easy -</p>
<pre><code>function env_or_default() {
    name=$1
    default=$2
    if [[ ${!name} == "" ]]; then
        echo "no value set for $name, setting it to default value $default"
        export $name=$default
    else
        echo "value for $name was passed in from the environment, it's value is ${!name}"
    fi
}
</code></pre>
<p>Obviously, the <code>echo</code> lines are there just for illustration.</p>
<pre><code>$ env_or_default NOT_SET not-set-default-value
no value set for NOT_SET, setting it to default value not-set-default-value
$ export ALREADY_SET=already-has-value
$ env_or_default ALREADY_SET already-set-default-value
value for ALREADY_SET was passed in from the environment, it's value is already- has-value
$ echo $NOT_SET
not-set-default-value
$ echo $ALREADY_SET
already-has-value
</code></pre>
<p>Happy scripting! </p>
<p>P.S.: Krzysztof Wilczynski showed another <a href="https://gist.github.com/kwilczynski/5877621">trick to do 
this</a>:</p>
<pre><code>random_file_name() {
    local __return=$1
    eval $__return="'$(date +"$(basename -- "$0")_%s_${RANDOM}_$$")'"
}

random_file_name FILE_NAME
echo $FILE_NAME
</code></pre>]]></content:encoded>
    </item>
    <item>
      <title>Global Day of Coderetreat 2012 - Nuremberg</title>
      <link>http://blog.zsoldosp.eu/2012/12/global-day-of-coderetreat-2012-nuremberg.html</link>
      <pubDate>Thu, 20 Dec 2012 09:30:00 CET</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[organizing]]></category>
      <category><![CDATA[community]]></category>
      <category><![CDATA[code retreat]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2012/12/global-day-of-coderetreat-2012-nuremberg.html</guid>
      <description>Global Day of Coderetreat 2012 - Nuremberg</description>
      <content:encoded><![CDATA[
<br/><br/><header> <div id="global-day-of-coderetreat-2012-nuremberg"></div></header><div class="post_prose"><blockquote>If you are not familiar with the concept of a  <a href="http://coderetreat.org/">code retreat</a>, listen to this  <a href="http://www.dotnetrocks.com/default.aspx?showNum=728">podcast</a> (or read the  <a href="http://s3.amazonaws.com/dnr/dotnetrocks_0728_corey_haines.pdf">transcript</a>).</blockquote>As you may remember, I've attended <a href="/2012/09/my-first-code-retreat-legacy-code.html">my first code retreat earlier this year in Frankfurt</a>. One of the reasons for attending was  that I had a nagging thought throughout organizing <a href="http://citconf.com/budapest2012/">CITCON Budapest</a> that I should do something locally too, and a coderetreat sounded just like the perfect thing. So I've came back with enough enthusiasm from Frankfurt to approach our CEO (Dirk) about <a href="http://www.paessler.com/">Paessler AG</a> helping me organize one in Nuremberg - and he offered the office to host it in and to pay for the lunch. Thus  the biggest obstacle was cleared.<br/><blockquote>The importance of this couldn't be emphasized. As I've seen on the <a href="http://globalday.coderetreat.org/">Global Day of Coderetreat</a> organizers' list, it has caused some headache and  worry for fellow hosts. And in addition to the fiscal support, my  colleagues went way beyond anything I expected - our sysadmins arranging the required technical &amp; security infrastructure, running <a href="http://www.paessler.com/blog/2012/11/21/other/paessler-is-one-of-the-hosts-of-the-global-day-of-coderetreat">the GDCR event on the  company blog</a>, and even non-programmer colleagues offering to  come by Saturday to help with anything if needed.  Thank you all, you made it really easy! (by the way, <a href="http://www.paessler.com/company/jobs">Paessler is hiring!</a>)</blockquote>Anyhow, this post will not be about the organization process, but about what I have learned on this day as a co-facilitator &amp; participant about code and people.<br/><blockquote>Another big thanks goes to <a href="http://twitter.com/marcoemrich">Marco Emrich</a>, a seasoned coderetreat facilitator, who helped getting the event off the ground and helped me getting  started facilitating (thanks to <a href="https://twitter.com/NicoleRauch">Nicole</a> &amp; <a href="http://twitter.com/Ookami86">Johannes</a>  for introducing me to Marco!)</blockquote>The attendance was low (next time we'll schedule the start 30-60 minutes later), but I was surprised to learn how well the coderetreat functioned with so few participants. To ensure there is enough variety and that people have new pairs, we took turns with Marco coding (which we planned anyway in case of odd number of participants).<br/><h2 id="the-sessions">The Sessions</h2><ol><li>no constraints, getting familiar with the problem</li><li><a href="https://github.com/zsoldosp/zsoldosp-dotfiles/blob/master/bin/snippets/python/unitsofmeasure.py">no primitives</a> &amp; focus on the rules (fake out the world if needed at all)</li><li>Ping-Pong TDD &amp; naive implementation (with a switch at half time)</li><li>no conditional &amp; no mouse</li><li>baby steps</li><li>free to choose session</li></ol><h2 id="its-the-global-day-of-coderetreat">It's the <strong>Global</strong> Day of Coderetreat</h2>Even though we were only a few people here, it's been great to chat to the others elsewhere worldwide, saying hi to people doing exactly the same thing we do, just in various other  locations. While there were audio problems sometime, we didn't mind it. And next year we won't  bother with trying to schedule exact times for the calls, since we all will miss those times  anyway, but rather just rely on improvising video calls.<br/><h2 id="code-related-observations">Code Related Observations</h2><ul><li>It's really interesting to see other people programming. It is certainly not    something one gets to do during their day jobs (except maybe trainers, team leads, and mentors).   It is even more interesting to contrast the external observer's impressions/understanding   with the understanding of the people involved in the programming - the difference can be   huge. This might help understanding how many developers feel bosses/managers always misunderstand   their progress...</li><li>It's also interesting to track people across the different pairs and see whether    they bring their firm opinions (battle scars?) to each session or let go of them    to allow the opportunity to learn a different approach. This is not necessarily a bad    thing, but if you have plans to learn, beware of this and be explicit what you want to    learn - know whether you want to explore one idea and bounce it off/get it challenged by    many people or whether you want to simply see how others program and see if any of that    could be applicable to you. E.g.: it was pretty interesting to see how my F#/Scala inspired   ideas (case classes &amp; types) could be materialized in clojure. However, I have certainly   learned less about clojure than I would have had I let my partner do it as he would   in clojure natively (though the <em>no primitives</em> restriction was screaming   for types in my opinion).</li><li>We developers are really creative at finding (or at least looking for) loopholes in the   constraints. During the <em>no conditional</em> session one pair TDD'd a function returning a boolean   and claimed they had no conditionals in their code and were trying to convince us that   even the rest of the system wouldn't need conditionals to use this code... Or that returning   booleans is not an issue since they could refactor it into something that doesn't need to    return booleans once they get to the rest of the system... I'm certainly looking forward running    a <em>no return values allowed</em> session and see how people will circumvent that (and rationalize it   away)!</li><li>The longer you have worked with a tool/language, the more readily you accept and work around   its quirks. When we wanted to structure our tests the way we would describe <a href="https://en.wikipedia.org/wiki/Conway's_Game_of_Life">the four rules   of Conway's Game of Life</a> in writing (heading, then four subheadings, and then the concrete    examples under the subheadings) it didn't match RSpec's expectations at all. We agreed that both    structures (RSpec vs. the natural) make sense and we can understand how &amp; why RSpec evolved this way,   but we couldn't make it match the natural structure. This lead to a nice brief discussion about when    you want to deviate from standard tooling/processes and when one is better off following it.</li><li>Some people just can't put off the desire to finish the task. I will have to be conscious of this   in the future, and prod people more - e.g.: to ask whether this test &amp; app code meets their definition of   perfect.</li><li>Sometimes when things are hard, it is an indication that you are doing the wrong thing or solving the   wrong problem. E.g.: I wanted to write a test for our function to ensure that the function fails unless    it gets exactly 8 parameters (number of neighbors) but we were not supposed to use primitives. It felt   like enlightenment when my pair pointed out that there is nothing in the rules that mandate that requirement!</li><li><a href="http://www.infoq.com/presentations/TDD-as-if-You-Meant-It">TDD as if you meant it</a> is really hard unless both of you are good at the chosen   language. I assumed Ruby and Python are rather similar, but learned quickly it is not the    case. While we had great conversations during the session, and I've learned some interesting things about   Ruby, we have not made much progress with the actual constraint.</li><li>It seems most people work on their desktop machines/docking stations, and thus their laptop is   a secondary device, where they have not invested in their environments that much, and thus   the no mouse constraint is much harder (e.g.: having ReSharper installed at work, but not on   the personal laptop).</li></ul>... and I could go on much longer :) Certainly, the coderetreat format is great, and I enjoyed both programming and facilitating (though the fact my German is not strong enough makes it somewhat difficult),  and I'm sure we'll do more coderetreats in Nuremberg. So keep an eye out for it on the <a href="http://coderetreat.org/events/event/search?q=Nuremberg">coderetreat  site</a> or on the <a href="http://www.softwerkskammer.de/">Softwarekammer</a> events page.</div>
]]></content:encoded>
    </item>
    <item>
      <title>How & Why I do code reviews</title>
      <link>http://blog.zsoldosp.eu/2011/03/how-why-i-do-code-reviews.html</link>
      <pubDate>Thu, 17 Mar 2011 11:00:00 CET</pubDate>
      <category><![CDATA[software]]></category>
      <category><![CDATA[practice]]></category>
      <category><![CDATA[code]]></category>
      <category><![CDATA[quality]]></category>
      <category><![CDATA[team]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2011/03/how-why-i-do-code-reviews.html</guid>
      <description>How & Why I do code reviews</description>
      <content:encoded><![CDATA[
<p><a href="http://en.wikipedia.org/wiki/Code_review">Code review</a> is one of the programming practices that I advocate. However, as with any practice, I find understanding and communicating the values and driving forces behind it even more important than the actual practice itself (see: <a href="http://en.wikipedia.org/wiki/Cargo_cult">Cargo Cult</a>). So, here is my take on code reviews.</p> <h2>Why?</h2> <p>I'm pretty much against introducing any practice just for the sake of introducing it. Different goals require different means, and without clear goals, it's rather difficult to evaluate whether a practice has helped the team or not. The reason I practice code reviews are:</p> <p><strong>Knowledge sharing</strong> (note: none of the teams I've been part of practiced <a href="http://jamesshore.com/Agile-Book/pair_programming.html">pair programming</a>, which serves this purpose quite well). It's a way to break the silos that exist within the team, regardless if they are horizontal (UI, server side, data access, etc.) or vertical (<em>this is Jane Doe's component, noone else can touch that for there dragons live</em>). I rather like that when I ask for a holiday my manager doesn't have to consider whether or not there is anyone who could work with my (recent) code.</p> <p><strong>Mentoring</strong>, though could be considered part of knowledge sharing, deserves to stand out on its own. I've found a lot of the concepts I came across first way too abstract, when read in a book, but when explained in context <em>(what you've just written there is known as the Factory pattern...</em>) I get a better and deeper understanding of it.</p> <p><strong>Culture creation</strong>. Again, abstract vs. concrete, talking vs. doing. One can have so many coding guidelines, best practices, etc. documents written. However, these documents usually highlight high level objectives, and almost any concrete implementation can be argued to fit with the description. I much prefer people arguing whether or not a new class should be extracted or not to a dry design guideline setting limits on the number of methods of a class and just checking against that formally (if at all).</p> <p><strong>Quality Assurance</strong>. Are there enough and appropriate tests? Do they makes sense to the next person (I routinely had to rename tests for my reviewers, because I was already too close to the code and didn't communicate intent well enough)? Are actually all tests passing? Haven't you accidentally reinvented the wheel (I've once failed to recognize that what I'm working with is an existing domain concept - the beauty of working with legacy code - so I created another model class for it)?</p> <p>Last, but not least, <strong>catching obvious bugs</strong> is a benefit not to be overlooked. Face it: we all make mistakes, that are embarassing in hindsight. Catching them during the development cycle is keeps the embarassment in a smaller circle :)<br/> </p><h2>What?</h2> <p>Computers have been invented to automate tiresome, repetitive, and boring tasks. Spending programmer time on checking tabs vs. spaces, curly brace placement, and other such, easily automated checks (<a href="http://stylecop.codeplex.com/">StyleCop</a>, <a href="http://checkstyle.sourceforge.net/">Checkstyle</a>, <a href="http://findbugs.sourceforge.net/">FindBugs</a>, etc.) is more than waste. If such things are important for you, do a quick check that there are no warnings in the build for these, and move on to the areas where value is added.</p> <h2>When?</h2> <p>Code reviews should be concerned with small, easily digestible chunks, just like commits. That's why I prefer to review commits. <strong>Before they are commited</strong>. I can only offer nonscientific justification (experience + anecdotal), and no explanation, but my observation is that committing code makes it just as rigid as clay becomes in the oven - it becomes much more difficult to change it. Renaming a method/variable is much easier while it's still in the staging area (maybe the burden of writing another commit message?). This also gives enough time to ensure that tests are run before each commit (run the command line build while the review is ongoing).<br/> </p><p>Some suggest that developers should ask for code review when they feel it's a riskier change they've made. Since I'm really bad at predicting when I make mistakes (to be frank, I tend not to be able to predict), just to be on the safe side (and to ensure the flow of information), I advocate to review <strong>every commit</strong>.</p> <h2>How?</h2> <p>There are multiple ways to achieve the same thing, one that I've found working is the following:</p><ol> <li>the developer who just completed a commitable chunk of work, signals the others (via a team chat window, though <a href="http://cm.baylor.edu/welcome.icpc">ACM ICPC</a> style balloons could work too) that she can be reviewed.<ol type="a"> <li>someone from the team picks up the request in the next few minutes - this delay ensures that the reviewer is not interrupted and dragged out from the flow.</li> <li>If noone picks it up in a few minutes, the developer stashes his work, and continues working until someone becomes available, when they return to the <em>original</em> change set.</li></ol></li> <li>the command line build is started on the developer's machine while the nature of changes is described in a few sentences to the reviewer, so the context is set</li> <li>the reviewer drives the order the changes are reviewed. She asks questions, requests clarifications, which usually result in <a href="http://www.refactoring.com/catalog/renameMethod.html">rename refactorings</a>.<br/>I tend to start reviewing the tests - first reviewing the names make sense and no relevant corner cases are missed, then the actual test code. Only once I'm happy with that do I turn to the actual code.<ol type="a"> <li>if any major flaws (bug, failing test, duplication - anything that cannot be fixed as fast as discussing it) are discovered, the code cannot be commited, and another review is needed (we tend to have that next reviewer be the same person as the one before in order not to slow down the process).</li> <li>otherwise, the normal <a href="http://codebetter.com/jeremymiller/2005/07/25/using-continuous-integration-better-do-the-check-in-dance/">checkin dance</a> begins, and the code is committed.</li></ol></li></ol> <h2>Cons, worries, and pitfalls (real and unreal ones)</h2> <p>Just like any other practice, this <strong>takes time</strong> to learn and to do. However, I rather prefer the extra few minutes spent discovering duplication than the days it'd take later to remove. Exposing the potential misunderstandings that wouldn't be discovered while just talking again justifies it. If a review takes longer than a few minutes, that signals there is a deeper issue there, which should be discussed - like agile practices promote, we've exposed a problem early. In summary: I think <strong>it's worth it</strong>.</p> <p><strong>Co-location</strong>, while certainly makes the process easier, is <strong>not required</strong>. If you are working in a remote team, you probably have appropriate communication channels. A voice call with shared screen is all that's needed.</p> <p>It takes <strong>effort and discipline</strong>. If the reviewer doesn't pay enough attention, isn't engaged, it's not going to work. Discussing regularly what kind of problems slipped through the past code reviews and whether they could (should) have been caught could be part of <a href="http://en.wikipedia.org/wiki/Retrospective#Software_development">retrospectives</a>.</p> <p>Just as it's possible to create horrible designs with TDD, it's just as easy to deviate from the architecture, design of the program in small, correct steps. Even when reviewing only small chunks, <strong>keep in mind the big picture</strong>.</p><p>Some teams do post commit code reviews instead, arguing that <strong>if we do it in an asynchronous fashion, the work of others is not interrupted</strong>, the developer is not slowed down by waiting for others. While I've seen teams practice post commit reviews effectively (as they say, a team of good developers is likely to achieve good results regardless of the process/practices they follow), so I'm not saying that can't work, but I prefer to do it before. In addition to the clay analogy used above, <strong>synchronous communication is more effective than asynchronous</strong> (at least between humans, between machines its another story). At the end of the day, developers will still need to talk with each other for clarification, so not much time is saved anyway.</p> <p><strong>Tooling</strong>. Most code review software don't support pre commit reviews, however, they have value for other purposes. I like them to start discussions on things I see in the <strong>code that don't need immediate changes</strong> for the features we are working on now, but should be discussed at some point - either to become a nice to have task, or to actually realize it's a must have refactoring. I find these tools can be more effective than leaving TODO comments in the source code - threaded discussions are nice, and hard to have in code comments. Another area where they shine is <strong>architecture/prototype reviews</strong>. It's a great way to prepare for a design review meeting. And yes, I do prefer code based architecture evaluation to UML diagrams (though the later are useful when communicating about the architecture), because concrete coded scenarios can bring up more flaws than the white board - see the <a href="http://codebetter.com/jeremymiller/2007/01/21/the-anti-team/">Non Coding Architect</a>.<br/> </p><p>And do I need to say it? Just as any other practice, <strong>it's no silver bullet</strong>!</p> <hr/><p>With regards to silver bullets - nothing is perfect, including this approach and the post itself. Please, <strong>do leave a comment</strong> pointing out any improvements/problems!</p><br/><hr><br/><p><strong>Update</strong>: <a href="http://www.zsoltfabok.com/blog/2011/08/code-review-during-retro/">Code Review During Retrospective</a> lays out a great approach for purely educational focused code reviews, I recommend reading that too!</p></hr>]]></content:encoded>
    </item>
  </channel>
</rss>
