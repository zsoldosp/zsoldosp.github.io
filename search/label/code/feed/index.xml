<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Do. Reflect. Learn. Repeat!</title>
    <link>http://blog.zsoldosp.eu</link>
    <description>Excercises in public learning</description>
    <pubDate>Sun, 15 Nov 2015 12:01:00 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Facilitating the Global Day of Coderetreat Zagreb (and a little Nuremberg) 2015</title>
      <link>http://blog.zsoldosp.eu/2015/11/15/facilitating-the-global-day-of-coderetreat-zagreb-and-a-little-nuremberg-2015/</link>
      <pubDate>Sun, 15 Nov 2015 12:30:00 CET</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[facilitating]]></category>
      <category><![CDATA[community]]></category>
      <category><![CDATA[code retreat]]></category>
      <category><![CDATA[organizing]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">7Wh3mKRL5MoalaxX7WlvFFplBkw=</guid>
      <description>Facilitating the Global Day of Coderetreat Zagreb (and a little Nuremberg) 2015</description>
      <content:encoded><![CDATA[
          <p>This was the second Zagreb <a href="http://coderetreat.org">coderetreat</a>, and this year we actually managed to
organize it to take place the same day as the rest of the world :) Thanks to 
the sponsors <a href="http://toptal.com">Toptal</a>, <a href="http://goodcode.io">Good Code</a>, <a href="http://floatingpoint.io">Floating Point</a> and
the hosts <a href="https://twitter.com/zeljkofilipin">Zeljko</a> and <a href="https://twitter.com/maljosa">Aljosa</a> for making it happen!</p>
<p><img alt="the team working on the game of life" src="/img/gdcr2015zag/whole-team.jpg" /></p>
<p>Due to our last minute advertising, the participants were Ruby heavy, but 
still, the eight people coded in Ruby, Python, C#, Haskell, JavaScript, and
R throughout the day - quite a feat if you consider that two attendees were 
not professional programmers!</p>
<p>Due to a late start and time constraint we only had 5 sessions with the
following constraints:</p>
<ol>
<li>no extra constraints, just exploring pairing, TDD, 4 rules of simple design,
    and the game of life</li>
<li>evil ping pong pairing</li>
<li>void methods only + remote pairing with Nuremberg (Germany)</li>
<li>maximum 3 lines per method</li>
<li>no conditionals (later restricted to no booleans)</li>
</ol>
<h1 id="remote-pairing-with-nuremberg">Remote pairing with Nuremberg</h1>
<p><img alt="remote pairing from zagreb" src="/img/gdcr2015zag/remote02.jpg" /></p>
<p>As I've known <a href="https://twitter.com/marcoemmrich">Marco</a> from before, a few days before the GDCR we had 
a video call where we tested out the feasibility  of remote pairing (we've
tried <a href="http://tmate.io">tmate.io</a> and <a href="http://floobits.com">FlooBits</a>), and
deemed it feasible for a coderetreat (i.e.: can be set up during the lunchbreak).</p>
<p><em>Aside</em>: Planning is everything, but no plan survives first contact with 
the enemy. All pairs used <a href="http://teamviewer.com">TeamViewer</a>
and VisualStudio in the end.</p>
<p>We used the lunchbreak to pair people up using a direct videocall between
me and <a href="https://twitter.com/marcoemmrich">Marco</a>, but that is a cumbersome process and we'll try to
come up with a better one for next time (maybe use a Google spreadsheet
where each location can put down the interested parties' language, tooling
and communication preferences before?), but nonetheless all remote pairs 
reported having had fun!</p>
<p>Facilitating remote pairs is surprisingly easy, but only when the pairs use
the headphones which can be shared between two people - one bud in each person's
ear.</p>
<p>While it does require some prior coordination between the hosts (sync session 
start times, agree on the same constraint for the session, etc.), I do suggest
you try it out if you have the chance, especially if you haven't remote paired
before!</p>
          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2015/11/15/facilitating-the-global-day-of-coderetreat-zagreb-and-a-little-nuremberg-2015/">Facilitating the Global Day of Coderetreat Zagreb (and a little Nuremberg) 2015</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
    <item>
      <title>End-to-End Testing - A Code Example</title>
      <link>http://blog.zsoldosp.eu/2014/02/15/end-to-end-testing-a-code-example/</link>
      <pubDate>Sat, 15 Feb 2014 17:15:00 CET</pubDate>
      <category><![CDATA[django]]></category>
      <category><![CDATA[end-to-end]]></category>
      <category><![CDATA[code]]></category>
      <category><![CDATA[testing]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">VQdt1K4VFfD0lxpX8wRk-1HuUSE=</guid>
      <description>End-to-End Testing - A Code Example</description>
      <content:encoded><![CDATA[
          <div class="document">
<dl class="docutils">
<dt>Prior posts in <a class="reference external" href="/category/end-to-end/">this series</a>:</dt>
<dd><ul class="first last simple">
<li><a class="reference external" href="/2013/10/23/a-new-look-at-end-to-end-testing-polymorphic-and-fast/">A New Look At End-to-End Testing - Polymorphic and Fast</a></li>
<li><a class="reference external" href="/2013/10/28/going-beyond-regression-what-other-benefits-could-end-to-end-testing-provide/">Going Beyond Regression - What Other Benefits could End-to-End Testing Provide?</a></li>
</ul>
</dd>
</dl>
<p>Abstract concepts are always easier to learn with concrete examples.
This is the first code-heavy post in the series, and it is intended to
illustrate the mechanics of the concept, not yet how it is applied to
the problem domain. For this reason, I use the example of <a class="reference external" href="https://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci
Numbers</a>, with a naive
implementation - the business logic is not the emphasis here, but how we
test them on multiple levels.</p>
<p>I chose <a class="reference external" href="https://www.djangoproject.com/">Django</a> to write the code,
in because of its lovely built in end-to-end testing support, but
knowing that not everyone is a Django developer (yet!), I chose <em>not</em>
to use any of the more idiomatic <a class="reference external" href="https://docs.djangoproject.com/en/1.6/topics/class-based-views/">Django class based views</a>,
since the purpose of this post is not to teach idiomatic Django.</p>
<p>Enough of the disclaimers, on to the code!</p>
<div class="section" id="the-specs-for-the-app">
<h1>The Specs for the App</h1>
<pre class="code python literal-block">
<span class="k">class</span> <span class="nc">FibonacciCalculatorTests</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">test_cannot_calculate_sequence_elements_less_than_one</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assert_cannot_calculate</span><span class="p">(</span><span class="n">n</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assert_cannot_calculate</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assert_can_calculate</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_currently_we_cannot_calculate_numbers_greater_than_10</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assert_can_calculate</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assert_cannot_calculate</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assert_cannot_calculate</span><span class="p">(</span><span class="mi">7895</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_can_calculate_the_first_ten_fibonacci_numbers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">7</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">34</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">9</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="mi">55</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">test_can_only_calculate_fibonacci_for_integers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assert_cannot_calculate</span><span class="p">(</span><span class="mf">3.14</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assert_cannot_calculate</span><span class="p">(</span><span class="s">'not a number'</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assert_cannot_calculate</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">assert_can_calculate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertIsNotNone</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</pre>
<p>We'll get to the implementation of <strong>assert_cannot_calculate</strong> next.</p>
</div>
<div class="section" id="the-business-logic">
<h1>The Business Logic</h1>
<p>Let's add the actual test implementation</p>
<pre class="code python literal-block">
<span class="kn">from</span> <span class="nn">django.test</span> <span class="kn">import</span> <span class="n">TestCase</span>
<span class="kn">from</span> <span class="nn">simple_fibonacci</span> <span class="kn">import</span> <span class="n">calculator</span><span class="p">,</span> <span class="n">urls</span>


<span class="k">class</span> <span class="nc">InMemory</span><span class="p">(</span><span class="n">FibonacciCalculatorTests</span><span class="p">,</span> <span class="n">TestCase</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">assert_cannot_calculate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">assertRaises</span><span class="p">(</span><span class="ne">ValueError</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_fibonacci</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">calculator</span><span class="o">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</pre>
<p>Followed by the calculator fibonacci logic</p>
<pre class="code python literal-block">
<span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c"># don't do this in production</span>
    <span class="c"># use https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">'value (</span><span class="si">%r</span><span class="s">) too low'</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">'value (</span><span class="si">%r</span><span class="s">) too high'</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">n</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</pre>
</div>
<div class="section" id="this-is-a-webservice-let-s-test-the-json-api">
<h1>This is a webservice, let's test the JSON API!</h1>
<p>You can probably guess, this is where we add the second implementation
for the FibonacciCaulcatorTests:</p>
<pre class="code python literal-block">
<span class="kn">import</span> <span class="nn">simple_fibonacci</span>
<span class="kn">from</span> <span class="nn">django.test.client</span> <span class="kn">import</span> <span class="n">Client</span>
<span class="kn">from</span> <span class="nn">django.core.urlresolvers</span> <span class="kn">import</span> <span class="n">reverse</span>
<span class="kn">import</span> <span class="nn">json</span>


<span class="k">class</span> <span class="nc">JsonHttpResponse</span><span class="p">(</span><span class="n">FibonacciCalculatorTests</span><span class="p">,</span> <span class="n">TestCase</span><span class="p">):</span>

    <span class="n">urls</span> <span class="o">=</span> <span class="n">simple_fibonacci</span><span class="o">.</span><span class="n">urls</span>

    <span class="k">def</span> <span class="nf">assert_cannot_calculate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci_parsed_json_response</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="s">'result'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="s">'ERROR'</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">get_fibonacci</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci_parsed_json_response</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertFalse</span><span class="p">(</span><span class="s">'error'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="s">'OK'</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="s">'status'</span><span class="p">],</span> <span class="n">data</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="s">'result'</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">get_fibonacci_parsed_json_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">()</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">reverse</span><span class="p">(</span><span class="s">'fibonacci'</span><span class="p">)</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="p">{</span><span class="s">'n'</span><span class="p">:</span> <span class="n">n</span><span class="p">},</span> <span class="n">HTTP_ACCEPT</span><span class="o">=</span><span class="s">'application/json'</span><span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
        <span class="n">allowed_keys</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">'status'</span><span class="p">,</span> <span class="s">'n'</span><span class="p">,</span> <span class="s">'error'</span><span class="p">,</span> <span class="s">'result'</span><span class="p">])</span>
        <span class="n">data_keys</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="nb">set</span><span class="p">([]),</span> <span class="n">data_keys</span> <span class="o">-</span> <span class="n">allowed_keys</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="nb">unicode</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="n">data</span><span class="p">[</span><span class="s">'n'</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">data</span>
</pre>
<p>As you can see, on top of the assertions in the base class, I've added
a few additional assertions, for the api contract (invariants) - this
api shouldn't return extra fields, or if it does, I should be notified
and then decided whether that's a bug that needs correction or a feature,
in which case I'll adjust the <strong>allowed_keys</strong> variable</p>
<p>And here is the implementation:</p>
<pre class="code python literal-block">
<span class="kn">from</span> <span class="nn">django.views.generic</span> <span class="kn">import</span> <span class="n">View</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
<span class="kn">from</span> <span class="nn">simple_fibonacci</span> <span class="kn">import</span> <span class="n">calculator</span>


<span class="k">class</span> <span class="nc">FibonacciView</span><span class="p">(</span><span class="n">View</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">[</span><span class="s">'n'</span><span class="p">]</span>
        <span class="n">error</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">calculator</span><span class="o">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
        <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">error</span> <span class="o">=</span> <span class="nb">unicode</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="n">content</span><span class="p">,</span> <span class="n">content_type</span> <span class="o">=</span> \
            <span class="bp">self</span><span class="o">.</span><span class="n">get_response_content_and_type_function</span><span class="p">(</span><span class="n">request</span><span class="p">)(</span>
                <span class="n">n</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">result</span>
            <span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">to_response</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">content_type</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_response_content_and_type_function</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">json_response</span>

    <span class="k">def</span> <span class="nf">json_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
        <span class="n">response_data</span> <span class="o">=</span> <span class="p">{</span><span class="s">'n'</span><span class="p">:</span> <span class="n">n</span><span class="p">}</span>
        <span class="k">if</span> <span class="n">error</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">response_data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'ERROR'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">response_data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'OK'</span>
            <span class="n">response_data</span><span class="p">[</span><span class="s">'result'</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">),</span> <span class="s">'application/json'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">content_type</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
        <span class="n">response</span><span class="p">[</span><span class="s">'Content-Type'</span><span class="p">]</span> <span class="o">=</span> <span class="n">content_type</span>
        <span class="k">return</span> <span class="n">response</span>
</pre>
</div>
<div class="section" id="let-s-expose-this-feature-to-normal-user-as-html">
<h1>Let's expose this feature to normal user as HTML!</h1>
<p>The order of the events is sometimes the other way around, but sooner
or later the point comes when the same functionality must be exposed
through a different channel - whether it's a simplified/more efficient
power user interface for your internal support people as opposed to
your first time customers through the public web shop, or adding a
mobile app for your web service, it will happen. And it's nice to know
we can execute the same set of tests against all implementations.</p>
<p>Let's update the tests first:</p>
<pre class="code python literal-block">
<span class="kn">import</span> <span class="nn">re</span>


<span class="k">class</span> <span class="nc">HtmlUserFriendlyHttpResponse</span><span class="p">(</span><span class="n">FibonacciCalculatorTests</span><span class="p">,</span> <span class="n">TestCase</span><span class="p">):</span>

    <span class="n">urls</span> <span class="o">=</span> <span class="n">urls</span>

    <span class="k">def</span> <span class="nf">assert_cannot_calculate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci_response</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertContains</span><span class="p">(</span><span class="n">response</span><span class="o">=</span><span class="n">response</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">'&lt;p class=&quot;error&quot;&gt;'</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertNotContains</span><span class="p">(</span><span class="n">response</span><span class="o">=</span><span class="n">response</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">'&lt;p class=&quot;success&quot;&gt;'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_fibonacci</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_fibonacci_response</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertContains</span><span class="p">(</span><span class="n">response</span><span class="o">=</span><span class="n">response</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">'&lt;p class=&quot;success&quot;&gt;'</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertNotContains</span><span class="p">(</span><span class="n">response</span><span class="o">=</span><span class="n">response</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">'&lt;p class=&quot;error&quot;&gt;'</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span>
            <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span>
                <span class="s">r'&lt;span id=&quot;result&quot;&gt;(\d+)&lt;/span&gt;'</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">content</span>
            <span class="p">)</span> <span class="o">.</span><span class="n">groups</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">get_fibonacci_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">client</span> <span class="o">=</span> <span class="n">Client</span><span class="p">()</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">reverse</span><span class="p">(</span><span class="s">'fibonacci'</span><span class="p">)</span>
        <span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">HTTP_ACCEPT</span><span class="o">=</span><span class="s">'text/html'</span><span class="p">)</span>  <span class="c"># as the user, we first load the page</span>
        <span class="n">post_response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
            <span class="n">url</span><span class="p">,</span> <span class="p">{</span><span class="s">'n'</span><span class="p">:</span> <span class="n">n</span><span class="p">},</span> <span class="n">HTTP_ACCEPT</span><span class="o">=</span><span class="s">'text/html'</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="s">'text/html'</span><span class="p">,</span> <span class="n">post_response</span><span class="p">[</span><span class="s">'Content-Type'</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">post_response</span>
</pre>
<p>And update our implementation:</p>
<pre class="code python literal-block">
<span class="kn">from</span> <span class="nn">django.views.generic</span> <span class="kn">import</span> <span class="n">View</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
<span class="kn">from</span> <span class="nn">simple_fibonacci</span> <span class="kn">import</span> <span class="n">calculator</span>


<span class="k">class</span> <span class="nc">FibonacciView</span><span class="p">(</span><span class="n">View</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">[</span><span class="s">'n'</span><span class="p">]</span>
        <span class="n">error</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">calculator</span><span class="o">.</span><span class="n">fibonacci</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
        <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">error</span> <span class="o">=</span> <span class="nb">unicode</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="n">content</span><span class="p">,</span> <span class="n">content_type</span> <span class="o">=</span> \
            <span class="bp">self</span><span class="o">.</span><span class="n">get_response_content_and_type_function</span><span class="p">(</span><span class="n">request</span><span class="p">)(</span>
                <span class="n">n</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">result</span>
            <span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">to_response</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">content_type</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_response_content_and_type_function</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">json_response</span>

    <span class="k">def</span> <span class="nf">json_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
        <span class="n">response_data</span> <span class="o">=</span> <span class="p">{</span><span class="s">'n'</span><span class="p">:</span> <span class="n">n</span><span class="p">}</span>
        <span class="k">if</span> <span class="n">error</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">response_data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'ERROR'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">response_data</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'OK'</span>
            <span class="n">response_data</span><span class="p">[</span><span class="s">'result'</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">response_data</span><span class="p">),</span> <span class="s">'application/json'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">content_type</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
        <span class="n">response</span><span class="p">[</span><span class="s">'Content-Type'</span><span class="p">]</span> <span class="o">=</span> <span class="n">content_type</span>
        <span class="k">return</span> <span class="n">response</span>
</pre>
<hr class="docutils" />
<p>That's the concept. The <a class="reference external" href="/category/end-to-end/">series</a> will
continue with me developing an app, and sharing relevant snippets
and lessons learned from that project. Stay tuned!</p>
</div>
</div>

          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2014/02/15/end-to-end-testing-a-code-example/">End-to-End Testing - A Code Example</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
    <item>
      <title>Going Beyond Regression - What Other Benefits could End-to-End Testing Provide?</title>
      <link>http://blog.zsoldosp.eu/2013/10/28/going-beyond-regression-what-other-benefits-could-end-to-end-testing-provide/</link>
      <pubDate>Mon, 28 Oct 2013 08:05:00 CET</pubDate>
      <category><![CDATA[untested ideas]]></category>
      <category><![CDATA[code]]></category>
      <category><![CDATA[business analysis]]></category>
      <category><![CDATA[testing]]></category>
      <category><![CDATA[end-to-end]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">1ojU7m2klQVoaVtPAyBIp7nHdds=</guid>
      <description>Going Beyond Regression - What Other Benefits could End-to-End Testing Provide?</description>
      <content:encoded><![CDATA[
          <p>In last week's post, I gave a few examples about when <a href="/2013/10/23/a-new-look-at-end-to-end-testing-polymorphic-and-fast/">Polymorphic
End-to-End Testing</a> testing makes sense. In this post, I would
like to take a step back and list a few additional benefits that could
be derived from end to end testing in general, regardless of the fashion
they were written in.</p>
<p><em>Note: some of these points can also apply to non-end-to-end tests too,
that were written in a black box style with proper test abstractions. 
While it could be argued that then the system is that one component, I
would rather just focus on the benefits we can derive on top of the 
regression / specification of the system.</em></p>
<p><em>Disclaimer:</em> note this post has been filed under <a href="/category/untested-ideas/">untested ideas</a>
 - they sound good, but I haven't gotten around to implementing all of
them.</p>
<h2 id="big-refactorings-and-rewrites">Big Refactorings and Rewrites</h2>
<p>Change is inevitable, and they often violate previous assumptions. 
Sometimes whole components (or systems) have to be rewritten. Having a 
set of tests that operate on a much higher abstraction level (e.g.: HTTP
GET/POST requests) can provide the required safety net to avoid 
regressions and making sure all relevant scenarios are addressed.</p>
<p>Some changes where this Page (Application) Object abstraction has helped
us:</p>
<ul>
<li>when converting a single page checkout process to a multi-step 
    wizard style checkout</li>
<li>when the article numbers used in our system changed</li>
<li>when we had to synchronize data into a new system - we could just 
    expand our assertions in the end-to-end tests to make sure that 
    every known scenario is written correctly into the new system</li>
</ul>
<p><a href="http://blog.8thlight.com/uncle-bob/2013/09/23/Test-first.html">It's easy to reconstruct a system from its tests, but much harder to do
it the other way around</a>. It has been
great to only adjust a few driver API methods and get the same amount of
functional coverage as before, without having to rewrite the test suite.</p>
<h2 id="forces-the-team-to-think-about-the-user-interface-and-experience">Forces the team to think about the user interface (and experience)</h2>
<p>While it is not required, it often made us reduce the complexity in 
the UI - when we find that a certain step is being exercised by a 
method with a single parameter from the tests, yet that method then 
derives a bunch of additional parameters to POST against the page, it
suggests one of two things: </p>
<ol>
<li>we are missing some test cases for these extra parameters</li>
<li>maybe we don't need these parameters to be provided by the end user,
    but we could derive them in the application too.</li>
</ol>
<p>Often the helper methods created can expose the need for additional 
support interfaces that won't probably come up during the specifications
phase, only after go-live.<br />
</p>
<p>Last, but not least, end-to-end gives us tests for the UI, yet the tests
remain maintainable - usually a single test API method is all that needs
to be fixed after template changes (and designers are even harder to get
to write tests than developers :)). <a href="http://ayende.com/blog/160929/on-failing-tests">Don't be afraid of many test 
failures!</a></p>
<h2 id="correlate-tests-with-other-business-metrics">Correlate tests with other business metrics</h2>
<p>While I recall people suggesting we run applications with a <a href="https://en.wikipedia.org/wiki/Code_coverage">coverage 
profiler attached</a>, the performance penalty is usually 
prohibiting.</p>
<p>However, I haven't yet seen a web application without a ton of external
metrics related to the urls in the app. If our tests are written against
urls too, after some data munging (primary keys and actual form values
surely won't match test values exactly, but translating them to <code>GET to 
view 1</code>, <code>POST to view 2</code>) we can correlate our tests with these 
metrics. </p>
<p>Some such metrics:</p>
<ul>
<li>application (webserver) access logs</li>
<li>Google Analytics or equivalent</li>
<li>...</li>
</ul>
<p>What can we learn from these correlations/comparisons?</p>
<ul>
<li>are we concentrating our tests in the least visited areas?</li>
<li>are we testing what our users are doing? Sure, it's nice that in our
    tests people sequentially finish their checkout, without wondering
    off the known path, but is this how they behave in production?</li>
</ul>
<h2 id="testcase-similarity-analysis">TestCase similarity analysis</h2>
<p>Some test scenarios will come up in multiple aspects of the system. 
Placing an order will trigger a bunch of actions in other modules - 
fulfillment, customer profile updates, marketing classification, invoice
rendering, notification emails, etc.</p>
<p>Sometimes these features are added with big time gaps in between, maybe
even the team members have changed over time. The ability to compare 
the requests the different TestCases make, and say that these two 
(three, four, etc.) TestCases seem to execute the same kind of requests
up to a point as the TestCase being added, but they also have the 
following extra paths they all execute, but the new TestCase doesn't...
Causing the developer to realize - of course, there are special rules
for orders from educational institutions!</p>
<h2 id="reducing-the-gap-between-end-user-error-reports-and-tests">Reducing the gap between end user error reports and tests</h2>
<p>Probably this is the least unexpected idea in the list, but worth 
stating nonetheless.</p>
<h2 id="in-place-help-for-trusted-users">In place help (for trusted users)</h2>
<p>Sure, this might require careful considerations, but giving the users 
the ability to browse the test cases/methods that matches their workflow
up to the current page, in a searchable fashion (if I place an order 
like this now, when will the X email be sent) could greatly reduce 
support work for the developer team. <em>Note: the purpose of this is not 
to isolate the developers from the users!!!</em></p>
<h2 id="always-up-to-date-screenshots-and-videos">Always up-to-date screenshots and videos</h2>
<p>Those manuals that have screenshots from many releases ago... Adding (or
marking) some test cases to be linked against documentation sections, and
having the tests actually take screenshots about them or record them as 
video sounds like a pretty useful idea for me. One could go further, 
such as highlighting the values/input fields where the test sends 
input, and the parts of the page that are asserted against...</p>
<p>And if the support team has access to the same API, they could even 
create these screenshots/videos for the customer as they are answering
their question (Here, take a look at this video, this is how the thing
you asked for is done).</p>
<hr />
<p>There must be many more ideas out there - let me know about them, and 
I'm happy to add them to this list (or link to wherever you published
it)!</p>
          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2013/10/28/going-beyond-regression-what-other-benefits-could-end-to-end-testing-provide/">Going Beyond Regression - What Other Benefits could End-to-End Testing Provide?</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
    <item>
      <title>A New Look At End-to-End Testing - Polymorphic and Fast</title>
      <link>http://blog.zsoldosp.eu/2013/10/23/a-new-look-at-end-to-end-testing-polymorphic-and-fast/</link>
      <pubDate>Wed, 23 Oct 2013 19:28:00 CEST</pubDate>
      <category><![CDATA[untested ideas]]></category>
      <category><![CDATA[end-to-end]]></category>
      <category><![CDATA[code]]></category>
      <category><![CDATA[testing]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">ity9bCalQkCuoSztWSPkSrQ8XGs=</guid>
      <description>A New Look At End-to-End Testing - Polymorphic and Fast</description>
      <content:encoded><![CDATA[
          <p>At the end of this post, there is a list of reasons why to work with 
end-to-end tests, but first please consider the post's idea on its own.
After that, I'm glad to have discussions about alternative/better 
solutions to the described (or omitted) contexts.</p>
<p>Please, read it first ;)</p>
<h1 id="terms-used">Terms used</h1>
<p>The below points are not intended to be full blown definitions, but
rather pointers.</p>
<ul>
<li>End-to-End testing - as <a href="http://gojko.net/2010/03/31/tdd-with-complex-infrastructures/">Nat Pryce has said in one of his 
    presentations</a>, the ends are always farther apart than one 
    thinks they are. The purpose is to execute the tests through as much
    of the application stack as possible - from the front end at least
    till the storage mechanism.</li>
<li>Polymorphism - I use it here mostly in the way demonstrated by the 
    <a href="https://en.wikipedia.org/wiki/Liskov_Substitution_Principle">Liskov Substitution Principle</a> - code written against an abstraction
    should be unaffected regardless of the concrete implementation of 
    that abstraction is given to it.</li>
</ul>
<h1 id="polymorphic-tests-we-are-already-doing-it">Polymorphic tests - we are already doing it</h1>
<p>Some of us already run the same tests on top of different code - we can
have multiple build platforms (x86 and x64, Windows and Linux, Python 2 
and 3, etc.), multiple configurations (SQLite and PostgreSQL), as well
as multiple versions of our dependent libraries (stable, latest release, 
and latest). What's common though among these scenarios is that the 
polymorphism happens largely <em>outside</em> of our codebase, and we don't 
have to think much about it when writing tests. </p>
<p>An example of executing multiple drivers <em>inside</em> our code is the use of 
Selenium tests - the same tests are run against Chrome, Firefox, etc. 
While each of the drivers is testing on the same level (Web UI), the 
actual browser drivers have different implementations, exposed via a 
common abstraction level - DOM selectors and event invocations.</p>
<p>Of course, most test code uses some level of abstraction to separate
the test logic from the actual page implementations.</p>
<h1 id="abstractions-page-objects">Abstractions - Page objects</h1>
<p>The <a href="http://martinfowler.com/bliki/PageObject.html">Page Object</a> pattern is used to help creating maintainable tests.
Instead of writing tests coupled to the implementations (go to this 
concrete url, wait <code>N</code> seconds for it to load, find and select the form
elements for username and password, etc.), these implementation details 
are hidden behind well named methods (e.g.: <code>open_login_form</code>, 
<code>login_with_credentials</code>, etc.), and thus are domain (client) friendly
and readable. And Page Objects can be composed together to build 
Application Objects.</p>
<p>Similar abstraction is used by the various Acceptance Testing tools,
such as FitNesse, Cucumber, and the other Gherkin tools - the spec texts
contain terms and values important for the business domain, and there
is separate code translating the spec's values and terms to call into 
the application and transforming its state into a format
expected by the tool.</p>
<h1 id="stripped-down-tests-only-the-script">Stripped down tests - only the script</h1>
<p>As seen above, the AT tools separate application logic from the test 
scenario's description.</p>
<p>Assertions have also been separated from test cases - either by developer 
choice, choosing to use a separate Assertions library like Hamcrest, 
instead of the unit testing library's own <code>assertFoo</code> methods), or
explicitly (<a href="http://visionmedia.github.io/mocha/#assertions">Mocha ships without an assertions library</a>).</p>
<p>Thus tests can really be focused just on the scenario being tested.</p>
<h1 id="fast-tests">Fast tests</h1>
<p>The single biggest disadvantage of <a href="http://www.confreaks.com/videos/641-gogaruco2011-fast-rails-tests">end to end tests is their speed</a>. They are slow. And the more of them there are, the slower they are.</p>
<p>This is one reason why the <a href="http://martinfowler.com/bliki/TestPyramid.html">Test Pyramid</a> recommends not having 
too many of them. Many architectural approaches (<a href="http://alistair.cockburn.us/Hexagonal+architecture">hexagonal</a>, DDD, etc.) 
suggest keeping a lightweight core application, and to attach the 
persistence and UI layers to it at its boundaries, leaving these ports 
and adapters lightweight too. Most of the testing then happens against
the core, dependency independent code, making the tests fast. </p>
<h1 id="fast-end-to-end-tests">Fast end to end tests</h1>
<p>Drumroll... we'll do a bit of cheating, of course. </p>
<p>Not all the tests have to run every single time. Performance tests are
usually not done when TDDing - that kicks in either later in 
the deployment pipeline, or runs daily. Teams organize their tests into
fast, smoke, and slow suites. Locally (and as the first step in the build
process) only the fast and smoke tests are run.</p>
<p>Putting all the above together means that writing systems with two 
self- contained cores (the app domain itself and the test scenarios) 
easily lends itself to end-to-end testing that can be run on multiple 
configurations, to give confidence that the app works with all its 
components and dependencies in production - yet enable fast feedback
required for developers. The same tests can be run:</p>
<ul>
<li>directly against the core application with mocks, stubs, etc.</li>
<li>through the app's (http) UI via the given frameworks/libraries testing 
  tools (e.g.: <code>django.test.client.Client</code>) with an in-memory database</li>
<li>through selenium against the full stack</li>
</ul>
<p>And of course, we can mix and match - selenium against SQLite, etc.</p>
<p>While TDDing, one can run the tests only against the fast core, after
that is complete, we can run the relevant tests with the end-to-end
driver, fix any mistakes that occur, check in, and let the build server
run all the integrated tests (using existing build practices to 
achieve speed)!</p>
<h2 id="in-which-contexts-could-it-make-sense">In Which Contexts Could It Make Sense?</h2>
<p>Thank you for reading this far - assuming you didn't just scroll 
ahead :)</p>
<p>The below list is by no means exhaustive, and as mentioned in the
introduction, there might be alternative approaches (please, let me
know!) - it's not a coincidence this blog is called "Exercises in 
public learning"! </p>
<p>With that out of the way, here are some contexts where this approach
could make sense:</p>
<ul>
<li>
<p>Working with a team where the skills both for testing and for writing
    good code are (yet) missing (<a href="http://5whys.com/blog/the-3-maturity-stages-of-a-software-team-and-how-scrum-fails.html">Chaotic team phase</a>).</p>
<p>As the joke goes, the only way to eat the elephant is one bite at a 
time. Same goes for learning - people can be overwhelmed to make 
the mental jump from manual to automated testing - throwing in good
programming practices can be too much.</p>
<p>Getting started with end to end tests that have decoupled driver
methods (even if on the <code>TestCase</code> class itself) is a great start - by
the time the tests become slow, if the team is bought into the idea
of automated testing, it can be refactored towards a core domain -
and inside that domain there still doesn't have to be proper clean
code (one step at a time).</p>
<p>In brief: for slow, gradual improvement.</p>
</li>
<li>
<p>The app actually has multiple interfaces for the same thing.</p>
<p>It can be due to A/B testing, or simply to accommodate the different
needs of different users (e.g.: for a webshop - there is the public
shop, the internal UI geared at the company's sales people, and the
API), multi-platform application (e.g.: mobile and desktop web, iOS and 
Android), etc.</p>
<p>If you test the checkout process end-to-end, then running the same
set of tests against each UI makes sense too - a single set of tests
to maintain and you know immediately whether all features work 
across all the views.</p>
</li>
<li>
<p>Catching unexpected bugs.</p>
<p>There is a class of bugs that can be caught by rigor, but I do slip
occasionally, ending up in a place where the unit tests are all 
green, but the application itself doesn't actually work.</p>
<p>Some real life such bugs I have run into:</p>
<ul>
<li>forgetting to place the actual input element on the page</li>
<li>encoding-persistence issues - an utf-8 database with a column
    that is windows-1250 encoded is ... unexpected</li>
<li>synchronizing data with another database where after the 
    required mappings it turned out said other database truncates
    our data</li>
</ul>
<p>All of the above can be addressed retroactively via adding targeted
tests for that specific integration point, but if we are already
testing the corner cases (length, encoding, etc.) in our code, it is 
nicer not to have to learn about these "unknown unknowns" from 
production problems...</p>
</li>
<li>
<p>Finally some related posts from other people:</p>
<ul>
<li>Ayende has multiple posts: on <a href="http://ayende.com/blog/154273/limit-your-abstractions-and-how-do-you-handle-testing">swapping out the infrastructure</a>, <a href="http://ayende.com/blog/4218/scenario-driven-tests">separating assertions from tests</a>, and <a href="http://ayende.com/blog/4217/even-tests-has-got-to-justify-themselves">about which tests add value in his opinion</a></li>
<li><a href="http://codebetter.com/sebastienlambla/2013/07/11/unit-testing-is-out-vertical-slice-testing-is-in/">Sebastien Lambla on Vertical Testing</a></li>
</ul>
</li>
</ul>
<p>There is much more to be said about other <a href="/2013/10/28/going-beyond-regression-what-other-benefits-could-end-to-end-testing-provide/">benefits of end to end 
testing</a>, but this post is already too long, so that will have to wait
for <a href="/2013/10/28/going-beyond-regression-what-other-benefits-could-end-to-end-testing-provide/">another post</a> (while waiting, you can read <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1183">Jason Gorman's 101 Uses for Polymorphic testing</a>)!</p>
<p>P.S.: I would like to thank (in (first name based) alphabetical order): 
<a href="https://twitter.com/ajmolenaar">Arjan Molenaar</a>,
<a href="https://twitter.com/sietstweets">Cirilo Wortel</a>,
<a href="http://douglassquirrel.com/">Douglas Squirrel</a>,
<a href="http://twitter.com/jtf">Jeffrey Frederick</a>,
<a href="https://twitter.com/KishenPanday">Kishen Simbhoedatpanday</a>,
<a href="http://twitter.com/marcoemrich">Marco Emrich</a>,
<a href="https://twitter.com/mfeathers">Michael Feathers</a>,
and of course my colleagues at <a href="http://www.paessler.com">Paessler AG</a> -  I much appreciate that you 
all listened to me while I tried to figure out how to explain this and 
gave feedback both about the content and the format (*). Thank you!</p>
<hr />
<p>(*) just to be crystal clear, this does not mean they endorsed it, 
just that they listened and gave feedback!</p>
          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2013/10/23/a-new-look-at-end-to-end-testing-polymorphic-and-fast/">A New Look At End-to-End Testing - Polymorphic and Fast</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
    <item>
      <title>Quick script to help reporting bugs for python</title>
      <link>http://blog.zsoldosp.eu/2013/09/11/quick-script-to-help-reporting-bugs-for-python/</link>
      <pubDate>Wed, 11 Sep 2013 17:00:00 CEST</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[note to self]]></category>
      <category><![CDATA[bash]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">-y0sMmjTXW82o3McTP9I6l_Hh4k=</guid>
      <description>Quick script to help reporting bugs for python</description>
      <content:encoded><![CDATA[
          <div class="document">
<p>While poking around the
<a class="reference external" href="https://pypi.python.org/pypi/testrepository/">testrepository</a>
package I ran into the cryptic error message of <strong>'unicodeescape'
codec can't decode bytes in position 56-57: truncated \uXXXX escape</strong>.
I set out to reproduce the bug, but that is of course an iterative
process, like anything else in coding, so I set out to script it. Since
I expect I'll need this again, and someone else might need it too,
I'm recording it here.</p>
<div class="note">
<p class="first admonition-title">Note</p>
<p>I eventually figured out the problem was that <a class="reference external" href="http://testrepository.readthedocs.org/en/latest/MANUAL.html#python">the recommended
default for testrepository</a>
has a different command line behavior from the built in unittest's
runner:</p>
<blockquote>
<ul class="simple">
<li><tt class="docutils literal">python <span class="pre">-m</span> unittest discover bugrepro</tt></li>
<li><tt class="docutils literal">testr run bugrepro</tt> doesn't get translated to the discover
root, but into <tt class="docutils literal">LISTOPT</tt> variable (<tt class="docutils literal">python <span class="pre">-m</span> subunit.run
discover . $LISTOPT $IDOPTION</tt>)</li>
</ul>
</blockquote>
<p class="last">Sure, a nicer exception message would have been nice.</p>
</div>
<div class="section" id="my-environment">
<h1>My Environment</h1>
<p>While for serious development I use Linux VMs, for explorations/hobbies,
I use the base Windows 7 on my command line from git-bash - it's enough
for basic scripting things, plus I tend to use git anyway, and I don't
like Powershell.</p>
</div>
<div class="section" id="the-script">
<h1>The script</h1>
<pre class="code bash literal-block">
<span class="c">#!/bin/sh
</span><span class="k">function </span>d<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&quot;\$ $*&quot;</span>
    <span class="nv">$*</span>
<span class="o">}</span>

<span class="k">function </span>win_info<span class="o">()</span> <span class="o">{</span>
    systeminfo | grep <span class="s2">&quot;\(OS Name\|OS Manufacturer\|System Type\|Locale\)&quot;</span>
<span class="o">}</span>

<span class="nv">REPRO_FOLDER</span><span class="o">=</span>bugrepro
d win_info
d python --version
d pip freeze
d git --version
d grep ^ -nH <span class="sb">`</span>find <span class="nv">$REPRO_FOLDER</span> -name <span class="se">\*</span>.py<span class="sb">`</span>
d python -m unittest discover <span class="nv">$REPRO_FOLDER</span>
d ls .testr* -l
d cat .testr.conf
d testr run <span class="nv">$REPRO_FOLDER</span>
d testr run
</pre>
<p>Running <tt class="docutils literal">./bugrepro.sh <span class="pre">2&gt;&amp;1</span> | tee bugrepro.txt&nbsp; &gt; /dev/null</tt> produces
the following output (cropped, you can see
<a class="reference external" href="/snippets/bugrepro.txt">the full output here</a>):</p>
<pre class="literal-block">
$ win_info
OS Name:                   Microsoft Windows 7 Professional 
OS Manufacturer:           Microsoft Corporation
System Type:               x64-based PC
System Locale:             en-us;English (United States)
Input Locale:              en-us;English (United States)
$ python --version
Python 2.7.4
$ pip freeze
extras==0.0.3

</pre>
</div>
<div class="section" id="things-i-learned">
<h1>Things I learned</h1>
<p>While this took somewhat longer than expected (and writing this
post wasn't even planned!) and I haven't even reported the actual
bug yet (Yak shaving...), but I don't mind - especially because I
did all this while recovering from a nasty cold :)</p>
<ul class="simple">
<li>for <tt class="docutils literal">cmd.exe</tt>, the <tt class="docutils literal">ver</tt> and <tt class="docutils literal">systeminfo</tt> commands are pretty neat
and <a class="reference external" href="http://www.windows7password.net/all-windows-7-commands-cmd-exe/">there are more commands</a>:
type <tt class="docutils literal">help</tt></li>
<li>wrote my first blog post in
<a class="reference external" href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>
since it's a better fit for including snippets (<a class="reference external" href="/2010/08/executable-documentation.html/">executable
documentation</a> is a pet peeve of mine!)</li>
</ul>
<p><strong>Open Questions</strong> (aka: do I want to shave further yaks?!):</p>
<ul>
<li><p class="first"><tt class="docutils literal">cmd.exe /C</tt> doesn't seem to behave as one would expect it when
invoked from git-bash (msysgit, 1.8.1) - it doesn't exit and the
execution to continue requires an <tt class="docutils literal">exit</tt> command!</p>
</li>
<li><p class="first">I always want to do
<a class="reference external" href="/2013/07/25/some-metaprogramming-reflection-in-bash/">metaprogramming in bash</a>
- how could I display
the body of a bash function? I'm thinking of something similar to
what one does with alias</p>
<pre class="code bash literal-block">
<span class="nv">$ </span><span class="nb">alias </span><span class="nv">foo</span><span class="o">=</span><span class="s1">'echo foo'</span>
<span class="nv">$ </span>foo
foo
<span class="nv">$ </span><span class="nb">alias </span>foo
<span class="nb">alias </span><span class="nv">foo</span><span class="o">=</span><span class="s1">'echo foo'</span>
</pre>
</li>
<li><p class="first">is there a better way for passing arguments in bash? I ended up doing
<tt class="docutils literal">grep ^</tt> because I went crazy trying to escape
<tt class="docutils literal"><span class="pre">find...</span> <span class="pre">-exec...\;</span></tt>.
and making the script use <tt class="docutils literal"><span class="pre">#!/bin/bash</span> <span class="pre">-x</span></tt> would be an overkill
here, and I just want to echo back the command that was executed...</p>
</li>
</ul>
</div>
</div>

          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2013/09/11/quick-script-to-help-reporting-bugs-for-python/">Quick script to help reporting bugs for python</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
    <item>
      <title>Some Metaprogramming (Reflection) In Bash</title>
      <link>http://blog.zsoldosp.eu/2013/07/25/some-metaprogramming-reflection-in-bash/</link>
      <pubDate>Thu, 25 Jul 2013 08:18:00 CEST</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[metaprogramming]]></category>
      <category><![CDATA[bash]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">SrLBQ0AP18Vcd0lyROK5o6cmGI0=</guid>
      <description>Some Metaprogramming (Reflection) In Bash</description>
      <content:encoded><![CDATA[
          <p>I needed to write a function in bash that would set an environment 
variable to that value, unless the variable has been already set. 
This is a typical metaprogramming (reflection, introspection, etc.) 
task. </p>
<p>However, searching for the terms I know (reflection, metaprogramming) 
did not yield any bash results, since the bash terminology is <em>variable
variable</em> or <em>dereferencing</em>. I hope the title of this post will help
other non-native bash script writers searching for the "wrong" keywords!</p>
<p>The trick is the <code>${!&lt;variable name&gt;}</code> construct - it will be interpreted
as <code>${&lt;variable name's value&gt;}</code>. An example</p>
<pre><code>$ a="aaaaa"
$ b="bbbbb"
$ echo $a
aaaaa
$ echo $b
bbbbb
$ variable_name="a"
$ echo ${!variable_name}
aaaaa
$ variable_name="b"
$ echo ${!variable_name}
bbbbb
</code></pre>
<p>Of course, I could only find it offline (thanks, <a href="https://www.xing.com/profiles/Dieter_Loskarn">Dieter</a>!). 
Armed with this kowledge, the function itself becomes easy -</p>
<pre><code>function env_or_default() {
    name=$1
    default=$2
    if [[ ${!name} == "" ]]; then
        echo "no value set for $name, setting it to default value $default"
        export $name=$default
    else
        echo "value for $name was passed in from the environment, it's value is ${!name}"
    fi
}
</code></pre>
<p>Obviously, the <code>echo</code> lines are there just for illustration.</p>
<pre><code>$ env_or_default NOT_SET not-set-default-value
no value set for NOT_SET, setting it to default value not-set-default-value
$ export ALREADY_SET=already-has-value
$ env_or_default ALREADY_SET already-set-default-value
value for ALREADY_SET was passed in from the environment, it's value is already- has-value
$ echo $NOT_SET
not-set-default-value
$ echo $ALREADY_SET
already-has-value
</code></pre>
<p>Happy scripting! </p>
<p>P.S.: Krzysztof Wilczynski showed another <a href="https://gist.github.com/kwilczynski/5877621">trick to do 
this</a>:</p>
<pre><code>random_file_name() {
    local __return=$1
    eval $__return="'$(date +"$(basename -- "$0")_%s_${RANDOM}_$$")'"
}

random_file_name FILE_NAME
echo $FILE_NAME
</code></pre>
          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2013/07/25/some-metaprogramming-reflection-in-bash/">Some Metaprogramming (Reflection) In Bash</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
    <item>
      <title>Global Day of Coderetreat 2012 - Nuremberg</title>
      <link>http://blog.zsoldosp.eu/2012/12/global-day-of-coderetreat-2012-nuremberg.html</link>
      <pubDate>Thu, 20 Dec 2012 09:30:00 CET</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[organizing]]></category>
      <category><![CDATA[community]]></category>
      <category><![CDATA[code retreat]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2012/12/global-day-of-coderetreat-2012-nuremberg.html</guid>
      <description>Global Day of Coderetreat 2012 - Nuremberg</description>
      <content:encoded><![CDATA[
          
<br/><br/><header> <div id="global-day-of-coderetreat-2012-nuremberg"></div></header><div class="post_prose"><blockquote>If you are not familiar with the concept of a  <a href="http://coderetreat.org/">code retreat</a>, listen to this  <a href="http://www.dotnetrocks.com/default.aspx?showNum=728">podcast</a> (or read the  <a href="http://s3.amazonaws.com/dnr/dotnetrocks_0728_corey_haines.pdf">transcript</a>).</blockquote>As you may remember, I've attended <a href="/2012/09/my-first-code-retreat-legacy-code.html">my first code retreat earlier this year in Frankfurt</a>. One of the reasons for attending was  that I had a nagging thought throughout organizing <a href="http://citconf.com/budapest2012/">CITCON Budapest</a> that I should do something locally too, and a coderetreat sounded just like the perfect thing. So I've came back with enough enthusiasm from Frankfurt to approach our CEO (Dirk) about <a href="http://www.paessler.com/">Paessler AG</a> helping me organize one in Nuremberg - and he offered the office to host it in and to pay for the lunch. Thus  the biggest obstacle was cleared.<br/><blockquote>The importance of this couldn't be emphasized. As I've seen on the <a href="http://globalday.coderetreat.org/">Global Day of Coderetreat</a> organizers' list, it has caused some headache and  worry for fellow hosts. And in addition to the fiscal support, my  colleagues went way beyond anything I expected - our sysadmins arranging the required technical &amp; security infrastructure, running <a href="http://www.paessler.com/blog/2012/11/21/other/paessler-is-one-of-the-hosts-of-the-global-day-of-coderetreat">the GDCR event on the  company blog</a>, and even non-programmer colleagues offering to  come by Saturday to help with anything if needed.  Thank you all, you made it really easy! (by the way, <a href="http://www.paessler.com/company/jobs">Paessler is hiring!</a>)</blockquote>Anyhow, this post will not be about the organization process, but about what I have learned on this day as a co-facilitator &amp; participant about code and people.<br/><blockquote>Another big thanks goes to <a href="http://twitter.com/marcoemrich">Marco Emrich</a>, a seasoned coderetreat facilitator, who helped getting the event off the ground and helped me getting  started facilitating (thanks to <a href="https://twitter.com/NicoleRauch">Nicole</a> &amp; <a href="http://twitter.com/Ookami86">Johannes</a>  for introducing me to Marco!)</blockquote>The attendance was low (next time we'll schedule the start 30-60 minutes later), but I was surprised to learn how well the coderetreat functioned with so few participants. To ensure there is enough variety and that people have new pairs, we took turns with Marco coding (which we planned anyway in case of odd number of participants).<br/><h2 id="the-sessions">The Sessions</h2><ol><li>no constraints, getting familiar with the problem</li><li><a href="https://github.com/zsoldosp/zsoldosp-dotfiles/blob/master/bin/snippets/python/unitsofmeasure.py">no primitives</a> &amp; focus on the rules (fake out the world if needed at all)</li><li>Ping-Pong TDD &amp; naive implementation (with a switch at half time)</li><li>no conditional &amp; no mouse</li><li>baby steps</li><li>free to choose session</li></ol><h2 id="its-the-global-day-of-coderetreat">It's the <strong>Global</strong> Day of Coderetreat</h2>Even though we were only a few people here, it's been great to chat to the others elsewhere worldwide, saying hi to people doing exactly the same thing we do, just in various other  locations. While there were audio problems sometime, we didn't mind it. And next year we won't  bother with trying to schedule exact times for the calls, since we all will miss those times  anyway, but rather just rely on improvising video calls.<br/><h2 id="code-related-observations">Code Related Observations</h2><ul><li>It's really interesting to see other people programming. It is certainly not    something one gets to do during their day jobs (except maybe trainers, team leads, and mentors).   It is even more interesting to contrast the external observer's impressions/understanding   with the understanding of the people involved in the programming - the difference can be   huge. This might help understanding how many developers feel bosses/managers always misunderstand   their progress...</li><li>It's also interesting to track people across the different pairs and see whether    they bring their firm opinions (battle scars?) to each session or let go of them    to allow the opportunity to learn a different approach. This is not necessarily a bad    thing, but if you have plans to learn, beware of this and be explicit what you want to    learn - know whether you want to explore one idea and bounce it off/get it challenged by    many people or whether you want to simply see how others program and see if any of that    could be applicable to you. E.g.: it was pretty interesting to see how my F#/Scala inspired   ideas (case classes &amp; types) could be materialized in clojure. However, I have certainly   learned less about clojure than I would have had I let my partner do it as he would   in clojure natively (though the <em>no primitives</em> restriction was screaming   for types in my opinion).</li><li>We developers are really creative at finding (or at least looking for) loopholes in the   constraints. During the <em>no conditional</em> session one pair TDD'd a function returning a boolean   and claimed they had no conditionals in their code and were trying to convince us that   even the rest of the system wouldn't need conditionals to use this code... Or that returning   booleans is not an issue since they could refactor it into something that doesn't need to    return booleans once they get to the rest of the system... I'm certainly looking forward running    a <em>no return values allowed</em> session and see how people will circumvent that (and rationalize it   away)!</li><li>The longer you have worked with a tool/language, the more readily you accept and work around   its quirks. When we wanted to structure our tests the way we would describe <a href="https://en.wikipedia.org/wiki/Conway's_Game_of_Life">the four rules   of Conway's Game of Life</a> in writing (heading, then four subheadings, and then the concrete    examples under the subheadings) it didn't match RSpec's expectations at all. We agreed that both    structures (RSpec vs. the natural) make sense and we can understand how &amp; why RSpec evolved this way,   but we couldn't make it match the natural structure. This lead to a nice brief discussion about when    you want to deviate from standard tooling/processes and when one is better off following it.</li><li>Some people just can't put off the desire to finish the task. I will have to be conscious of this   in the future, and prod people more - e.g.: to ask whether this test &amp; app code meets their definition of   perfect.</li><li>Sometimes when things are hard, it is an indication that you are doing the wrong thing or solving the   wrong problem. E.g.: I wanted to write a test for our function to ensure that the function fails unless    it gets exactly 8 parameters (number of neighbors) but we were not supposed to use primitives. It felt   like enlightenment when my pair pointed out that there is nothing in the rules that mandate that requirement!</li><li><a href="http://www.infoq.com/presentations/TDD-as-if-You-Meant-It">TDD as if you meant it</a> is really hard unless both of you are good at the chosen   language. I assumed Ruby and Python are rather similar, but learned quickly it is not the    case. While we had great conversations during the session, and I've learned some interesting things about   Ruby, we have not made much progress with the actual constraint.</li><li>It seems most people work on their desktop machines/docking stations, and thus their laptop is   a secondary device, where they have not invested in their environments that much, and thus   the no mouse constraint is much harder (e.g.: having ReSharper installed at work, but not on   the personal laptop).</li></ul>... and I could go on much longer :) Certainly, the coderetreat format is great, and I enjoyed both programming and facilitating (though the fact my German is not strong enough makes it somewhat difficult),  and I'm sure we'll do more coderetreats in Nuremberg. So keep an eye out for it on the <a href="http://coderetreat.org/events/event/search?q=Nuremberg">coderetreat  site</a> or on the <a href="http://www.softwerkskammer.de/">Softwarekammer</a> events page.</div>

          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2012/12/global-day-of-coderetreat-2012-nuremberg.html">Global Day of Coderetreat 2012 - Nuremberg</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
    <item>
      <title>How & Why I do code reviews</title>
      <link>http://blog.zsoldosp.eu/2011/03/how-why-i-do-code-reviews.html</link>
      <pubDate>Thu, 17 Mar 2011 11:00:00 CET</pubDate>
      <category><![CDATA[software]]></category>
      <category><![CDATA[practice]]></category>
      <category><![CDATA[code]]></category>
      <category><![CDATA[quality]]></category>
      <category><![CDATA[team]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2011/03/how-why-i-do-code-reviews.html</guid>
      <description>How & Why I do code reviews</description>
      <content:encoded><![CDATA[
          
<p><a href="http://en.wikipedia.org/wiki/Code_review">Code review</a> is one of the programming practices that I advocate. However, as with any practice, I find understanding and communicating the values and driving forces behind it even more important than the actual practice itself (see: <a href="http://en.wikipedia.org/wiki/Cargo_cult">Cargo Cult</a>). So, here is my take on code reviews.</p> <h2>Why?</h2> <p>I'm pretty much against introducing any practice just for the sake of introducing it. Different goals require different means, and without clear goals, it's rather difficult to evaluate whether a practice has helped the team or not. The reason I practice code reviews are:</p> <p><strong>Knowledge sharing</strong> (note: none of the teams I've been part of practiced <a href="http://jamesshore.com/Agile-Book/pair_programming.html">pair programming</a>, which serves this purpose quite well). It's a way to break the silos that exist within the team, regardless if they are horizontal (UI, server side, data access, etc.) or vertical (<em>this is Jane Doe's component, noone else can touch that for there dragons live</em>). I rather like that when I ask for a holiday my manager doesn't have to consider whether or not there is anyone who could work with my (recent) code.</p> <p><strong>Mentoring</strong>, though could be considered part of knowledge sharing, deserves to stand out on its own. I've found a lot of the concepts I came across first way too abstract, when read in a book, but when explained in context <em>(what you've just written there is known as the Factory pattern...</em>) I get a better and deeper understanding of it.</p> <p><strong>Culture creation</strong>. Again, abstract vs. concrete, talking vs. doing. One can have so many coding guidelines, best practices, etc. documents written. However, these documents usually highlight high level objectives, and almost any concrete implementation can be argued to fit with the description. I much prefer people arguing whether or not a new class should be extracted or not to a dry design guideline setting limits on the number of methods of a class and just checking against that formally (if at all).</p> <p><strong>Quality Assurance</strong>. Are there enough and appropriate tests? Do they makes sense to the next person (I routinely had to rename tests for my reviewers, because I was already too close to the code and didn't communicate intent well enough)? Are actually all tests passing? Haven't you accidentally reinvented the wheel (I've once failed to recognize that what I'm working with is an existing domain concept - the beauty of working with legacy code - so I created another model class for it)?</p> <p>Last, but not least, <strong>catching obvious bugs</strong> is a benefit not to be overlooked. Face it: we all make mistakes, that are embarassing in hindsight. Catching them during the development cycle is keeps the embarassment in a smaller circle :)<br/> </p><h2>What?</h2> <p>Computers have been invented to automate tiresome, repetitive, and boring tasks. Spending programmer time on checking tabs vs. spaces, curly brace placement, and other such, easily automated checks (<a href="http://stylecop.codeplex.com/">StyleCop</a>, <a href="http://checkstyle.sourceforge.net/">Checkstyle</a>, <a href="http://findbugs.sourceforge.net/">FindBugs</a>, etc.) is more than waste. If such things are important for you, do a quick check that there are no warnings in the build for these, and move on to the areas where value is added.</p> <h2>When?</h2> <p>Code reviews should be concerned with small, easily digestible chunks, just like commits. That's why I prefer to review commits. <strong>Before they are commited</strong>. I can only offer nonscientific justification (experience + anecdotal), and no explanation, but my observation is that committing code makes it just as rigid as clay becomes in the oven - it becomes much more difficult to change it. Renaming a method/variable is much easier while it's still in the staging area (maybe the burden of writing another commit message?). This also gives enough time to ensure that tests are run before each commit (run the command line build while the review is ongoing).<br/> </p><p>Some suggest that developers should ask for code review when they feel it's a riskier change they've made. Since I'm really bad at predicting when I make mistakes (to be frank, I tend not to be able to predict), just to be on the safe side (and to ensure the flow of information), I advocate to review <strong>every commit</strong>.</p> <h2>How?</h2> <p>There are multiple ways to achieve the same thing, one that I've found working is the following:</p><ol> <li>the developer who just completed a commitable chunk of work, signals the others (via a team chat window, though <a href="http://cm.baylor.edu/welcome.icpc">ACM ICPC</a> style balloons could work too) that she can be reviewed.<ol type="a"> <li>someone from the team picks up the request in the next few minutes - this delay ensures that the reviewer is not interrupted and dragged out from the flow.</li> <li>If noone picks it up in a few minutes, the developer stashes his work, and continues working until someone becomes available, when they return to the <em>original</em> change set.</li></ol></li> <li>the command line build is started on the developer's machine while the nature of changes is described in a few sentences to the reviewer, so the context is set</li> <li>the reviewer drives the order the changes are reviewed. She asks questions, requests clarifications, which usually result in <a href="http://www.refactoring.com/catalog/renameMethod.html">rename refactorings</a>.<br/>I tend to start reviewing the tests - first reviewing the names make sense and no relevant corner cases are missed, then the actual test code. Only once I'm happy with that do I turn to the actual code.<ol type="a"> <li>if any major flaws (bug, failing test, duplication - anything that cannot be fixed as fast as discussing it) are discovered, the code cannot be commited, and another review is needed (we tend to have that next reviewer be the same person as the one before in order not to slow down the process).</li> <li>otherwise, the normal <a href="http://codebetter.com/jeremymiller/2005/07/25/using-continuous-integration-better-do-the-check-in-dance/">checkin dance</a> begins, and the code is committed.</li></ol></li></ol> <h2>Cons, worries, and pitfalls (real and unreal ones)</h2> <p>Just like any other practice, this <strong>takes time</strong> to learn and to do. However, I rather prefer the extra few minutes spent discovering duplication than the days it'd take later to remove. Exposing the potential misunderstandings that wouldn't be discovered while just talking again justifies it. If a review takes longer than a few minutes, that signals there is a deeper issue there, which should be discussed - like agile practices promote, we've exposed a problem early. In summary: I think <strong>it's worth it</strong>.</p> <p><strong>Co-location</strong>, while certainly makes the process easier, is <strong>not required</strong>. If you are working in a remote team, you probably have appropriate communication channels. A voice call with shared screen is all that's needed.</p> <p>It takes <strong>effort and discipline</strong>. If the reviewer doesn't pay enough attention, isn't engaged, it's not going to work. Discussing regularly what kind of problems slipped through the past code reviews and whether they could (should) have been caught could be part of <a href="http://en.wikipedia.org/wiki/Retrospective#Software_development">retrospectives</a>.</p> <p>Just as it's possible to create horrible designs with TDD, it's just as easy to deviate from the architecture, design of the program in small, correct steps. Even when reviewing only small chunks, <strong>keep in mind the big picture</strong>.</p><p>Some teams do post commit code reviews instead, arguing that <strong>if we do it in an asynchronous fashion, the work of others is not interrupted</strong>, the developer is not slowed down by waiting for others. While I've seen teams practice post commit reviews effectively (as they say, a team of good developers is likely to achieve good results regardless of the process/practices they follow), so I'm not saying that can't work, but I prefer to do it before. In addition to the clay analogy used above, <strong>synchronous communication is more effective than asynchronous</strong> (at least between humans, between machines its another story). At the end of the day, developers will still need to talk with each other for clarification, so not much time is saved anyway.</p> <p><strong>Tooling</strong>. Most code review software don't support pre commit reviews, however, they have value for other purposes. I like them to start discussions on things I see in the <strong>code that don't need immediate changes</strong> for the features we are working on now, but should be discussed at some point - either to become a nice to have task, or to actually realize it's a must have refactoring. I find these tools can be more effective than leaving TODO comments in the source code - threaded discussions are nice, and hard to have in code comments. Another area where they shine is <strong>architecture/prototype reviews</strong>. It's a great way to prepare for a design review meeting. And yes, I do prefer code based architecture evaluation to UML diagrams (though the later are useful when communicating about the architecture), because concrete coded scenarios can bring up more flaws than the white board - see the <a href="http://codebetter.com/jeremymiller/2007/01/21/the-anti-team/">Non Coding Architect</a>.<br/> </p><p>And do I need to say it? Just as any other practice, <strong>it's no silver bullet</strong>!</p> <hr/><p>With regards to silver bullets - nothing is perfect, including this approach and the post itself. Please, <strong>do leave a comment</strong> pointing out any improvements/problems!</p><br/><hr><br/><p><strong>Update</strong>: <a href="http://www.zsoltfabok.com/blog/2011/08/code-review-during-retro/">Code Review During Retrospective</a> lays out a great approach for purely educational focused code reviews, I recommend reading that too!</p></hr>
          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2011/03/how-why-i-do-code-reviews.html">How & Why I do code reviews</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
  </channel>
</rss>
