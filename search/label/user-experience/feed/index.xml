<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Do. Reflect. Learn. Repeat!</title>
    <link>http://blog.zsoldosp.eu</link>
    <description>Excercises in public learning</description>
    <pubDate>Wed, 22 Jan 2014 21:40:13 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>About the export-to-Excel Anti-Pattern</title>
      <link>http://blog.zsoldosp.eu/2011/07/about-export-to-excel-anti-pattern.html</link>
      <pubDate>Tue, 19 Jul 2011 08:00:00 CEST</pubDate>
      <category><![CDATA[user experience]]></category>
      <category><![CDATA[anti-pattern]]></category>
      <category><![CDATA[analysis]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2011/07/about-export-to-excel-anti-pattern.html</guid>
      <description>About the export-to-Excel Anti-Pattern</description>
      <content:encoded><![CDATA[
          
<p>Excel is a wonderful ad hoc data analysis tool for non-programmers, and is also often <a href="http://lostechies.com/jimmybogard/2010/09/08/natural-selection-in-it/">the first milestone in the software evolution</a>. No wonder export to excel is the most common feature requested for business applications (some people even go as far as not developing a GUI at all, but just write Excel plugins).</p><br/> <p>The recent <a href="http://codebetter.com/iancooper/2011/07/15/why-crud-might-be-what-they-want-but-may-not-be-what-they-need/">CRUD vs Task Based UI</a> touches this issue, but focuses heavily on CRUD - and this problem is applicable to other types of applications (<em>all</em> applications have reports). The problem with the Excel export in any application is that <strong>important business activity happens outside the software</strong>. So when your users almost "beg" for a spreadsheet export, it's a strong clue that some aspect of the business process is not modelled, and our users likely perform some mundane, manual work - and IT is supposed to automate that!</p><br/> <p>Some examples I've run into (non exhaustive list!):<br/> <ul><br/> <li>users were reconciling data from two sources, but it took <a href="http://en.wikipedia.org/wiki/5_Whys">three-four Whys</a> to figure that out. And even after the discovery and the agreed automation solution I had to promise there will be an excel export feature (more on that later)!</li><br/> <li>users were manually looking for errors - turned out that adding a single filter to an existing report provided the same functionality.</li><br/> </ul><br/> </p><br/> <p>Excel centric business processes indicate communication and trust problems - the business doesn't ask for features, and the developers don't know what their users do with the delivered software. There could be many reasons for that (organizational, bad experience, high turnover, etc.), but beware - and if you spot it, try to act to make the situation better.</p><br/> <p>I used to joke with users (now I believe it seriously) that my role as a developer is to force them to figure out and document (software is a form of executable documentation of a business process after all) their work processes, and enforce that for the future. Much better than a paper/Word based new hire getting started guide!<br/> <p>However, <strong>exporting to Excel is a feature business applications should have</strong>, possibly for every list/graph we have in the system. Some of the tasks don't have the <a href="http://en.wikipedia.org/wiki/Return_on_Investment">ROI</a> that would justify the development of a given new feature/report/etc., and giving users direct access to the data is more enabling (think <strong>innovation</strong>) than if they had to ask IT every single time they wanted to check something (the more hurdles we put up, the less likely they'll be to check, potentially damaging the business). We should <strong>monitor</strong> these exports, and look for patterns (potentially across screens), and when a pattern emerges, talk to our users about how we could make life easier for them. A few occasions don't warrant a development project, and we don't want to develop something too early (just like with refactoring - wait for the pattern to emerge before you prematurely refactor to a structure that hinders later development).</p></p>
          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2011/07/about-export-to-excel-anti-pattern.html">About the export-to-Excel Anti-Pattern</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
  </channel>
</rss>
