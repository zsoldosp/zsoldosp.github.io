<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Do. Reflect. Learn. Repeat!</title>
    <link>http://blog.zsoldosp.eu</link>
    <description>Excercises in public learning</description>
    <pubDate>Fri, 01 Dec 2023 08:41:17 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>What Elixir Taught Me About Java - Method Overloading Is Just a Convention</title>
      <link>http://blog.zsoldosp.eu/2014/02/08/what-elixir-taught-me-about-java-method-overloading-is-just-a-convention/</link>
      <pubDate>Sat, 08 Feb 2014 15:10:00 CET</pubDate>
      <category><![CDATA[oop]]></category>
      <category><![CDATA[programming languages]]></category>
      <category><![CDATA[software]]></category>
      <category><![CDATA[elixir]]></category>
      <guid isPermaLink="false">4mQOP4Y091_HZpmnEdjhq0LThyc=</guid>
      <description>What Elixir Taught Me About Java - Method Overloading Is Just a Convention</description>
      <content:encoded><![CDATA[
          <div class="document">
<p>I was struggling to understand <a class="reference external" href="http://stackoverflow.com/questions/18011784/why-are-there-two-kinds-of-functions-in-elixir/18023790#18023790">the differences between anonymous
and named functions</a>
in Elixir - only to eventually realize that a lot of it is due
to the incorrect mental model I had about <a class="reference external" href="https://en.wikipedia.org/wiki/Method_overloading">method overloading</a>
from before.</p>
<p>As the saying goes, <em>&quot;for every hard problem, there is a logical, yet
completely wrong explanation&quot;</em>.</p>
<div class="section" id="examples-of-function-arity-overloading">
<h1>Examples of function arity overloading</h1>
<p><em>Arity is just the term used to refer to the number of arguments the
function has.</em></p>
<p><strong>Java</strong></p>
<pre class="code java literal-block">
<span class="keyword declaration">public</span><span class="whitespace"> </span><span class="keyword declaration">class</span> <span class="name class">MethodOverloadingArity</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">

    </span><span class="keyword declaration">public</span><span class="whitespace"> </span><span class="keyword declaration">static</span><span class="whitespace"> </span><span class="name">String</span><span class="whitespace"> </span><span class="name function">join</span><span class="punctuation">(</span><span class="name">String</span><span class="whitespace"> </span><span class="name">a</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">String</span><span class="whitespace"> </span><span class="name">b</span><span class="punctuation">)</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">
        </span><span class="keyword">return</span><span class="whitespace"> </span><span class="name">join</span><span class="punctuation">(</span><span class="name">a</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">b</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string">&quot; &quot;</span><span class="punctuation">);</span><span class="whitespace">
    </span><span class="punctuation">}</span><span class="whitespace">

    </span><span class="keyword declaration">public</span><span class="whitespace"> </span><span class="keyword declaration">static</span><span class="whitespace"> </span><span class="name">String</span><span class="whitespace"> </span><span class="name function">join</span><span class="punctuation">(</span><span class="name">String</span><span class="whitespace"> </span><span class="name">a</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">String</span><span class="whitespace"> </span><span class="name">b</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">String</span><span class="whitespace"> </span><span class="name">sep</span><span class="punctuation">)</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">
        </span><span class="keyword">return</span><span class="whitespace"> </span><span class="name">String</span><span class="punctuation">.</span><span class="name attribute">format</span><span class="punctuation">(</span><span class="literal string">&quot;%s%s%s&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">a</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">sep</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">b</span><span class="punctuation">);</span><span class="whitespace">
    </span><span class="punctuation">}</span><span class="whitespace">
</span><span class="punctuation">}</span>
</pre>
<p><strong>Elixir</strong></p>
<pre class="code elixir literal-block">
<span class="keyword declaration">defmodule</span><span class="whitespace"> </span><span class="name class">MethodOverloadingArity</span><span class="whitespace"> </span><span class="keyword">do</span><span class="whitespace">

    </span><span class="keyword declaration">def</span><span class="whitespace"> </span><span class="name">join</span><span class="punctuation">(</span><span class="name">a</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">b</span><span class="punctuation">)</span><span class="whitespace"> </span><span class="keyword">do</span><span class="whitespace">
        </span><span class="name">join</span><span class="punctuation">(</span><span class="name">a</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">b</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string double">&quot; &quot;</span><span class="punctuation">)</span><span class="whitespace">
    </span><span class="keyword">end</span><span class="whitespace">

    </span><span class="keyword declaration">def</span><span class="whitespace"> </span><span class="name">join</span><span class="punctuation">(</span><span class="name">a</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">b</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">sep</span><span class="punctuation">)</span><span class="whitespace"> </span><span class="keyword">do</span><span class="whitespace">
        </span><span class="name">a</span><span class="whitespace"> </span><span class="operator">&lt;&gt;</span><span class="whitespace"> </span><span class="name">sep</span><span class="whitespace"> </span><span class="operator">&lt;&gt;</span><span class="whitespace"> </span><span class="name">b</span><span class="whitespace">  </span><span class="comment single"># string concatenation</span><span class="whitespace">
    </span><span class="keyword">end</span><span class="whitespace">

</span><span class="keyword">end</span>
</pre>
</div>
<div class="section" id="my-wrong-mental-model">
<h1>My wrong mental model</h1>
<p>I was thinking that since in interviews, tutorials, etc. method
overloading always comes up, there must be something special about it.
It makes for dynamic dispatch - which gets bound at compile time in
regular Java, but when invoked dynamically, it will resolve to the
appropriate overload. I.e.: the following pseudocode would be valid:</p>
<pre class="code elixir literal-block">
<span class="name">foo</span><span class="whitespace"> </span><span class="operator">=</span><span class="whitespace"> </span><span class="name class">MethodOverloadingArity</span><span class="operator">.</span><span class="name">join</span><span class="whitespace">
</span><span class="name">foo</span><span class="operator">.</span><span class="punctuation">(</span><span class="literal string double">&quot;a&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string double">&quot;b&quot;</span><span class="punctuation">)</span><span class="whitespace">
</span><span class="name">foo</span><span class="operator">.</span><span class="punctuation">(</span><span class="literal string double">&quot;a&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string double">&quot;b&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string double">&quot; - &quot;</span><span class="punctuation">)</span>
</pre>
<p>You can tell just from the heading that of course, it's is not valid.
And this is what we get from Elixir:</p>
<pre class="literal-block">
** (UndefinedFunctionError) undefined function: MethodOverloadingArity.join/0
    MethodOverloadingArity.join()
    MethodOverloadingArity.exs:13: (file)
    (elixir) src/elixir_lexical.erl:17: :elixir_lexical.run/2
    (elixir) lib/code.ex:301: Code.require_file/2


</pre>
<p>In the language, the functions are only unique with the combination of
the function name and the number of arguments - it fails because it
cannot find an overload which takes 0 arguments. Thus at the time I
store a reference to it in a variable, I have to resolve the arity.</p>
<p>Initially I thought it's just a special behavior for Elixir (Erlang),
so I set out to explore how it works in Java</p>
<pre class="code java literal-block">
<span class="keyword namespace">import</span><span class="whitespace"> </span><span class="name namespace">java.lang.reflect.Method</span><span class="punctuation">;</span><span class="whitespace">
</span><span class="keyword namespace">import</span><span class="whitespace"> </span><span class="name namespace">java.lang.IllegalArgumentException</span><span class="punctuation">;</span><span class="whitespace">

</span><span class="keyword declaration">public</span><span class="whitespace"> </span><span class="keyword declaration">class</span> <span class="name class">MethodOverloadingMain</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">

    </span><span class="keyword declaration">public</span><span class="whitespace"> </span><span class="keyword declaration">static</span><span class="whitespace"> </span><span class="keyword type">void</span><span class="whitespace"> </span><span class="name function">main</span><span class="punctuation">(</span><span class="name">String</span><span class="operator">[]</span><span class="whitespace"> </span><span class="name">args</span><span class="punctuation">)</span><span class="whitespace"> </span><span class="keyword declaration">throws</span><span class="whitespace"> </span><span class="name">Exception</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">
        </span><span class="name">Class</span><span class="operator">&lt;?&gt;</span><span class="whitespace"> </span><span class="name">c</span><span class="whitespace"> </span><span class="operator">=</span><span class="whitespace"> </span><span class="name">Class</span><span class="punctuation">.</span><span class="name attribute">forName</span><span class="punctuation">(</span><span class="literal string">&quot;MethodOverloadingArity&quot;</span><span class="punctuation">);</span><span class="whitespace">
        </span><span class="name">Method</span><span class="operator">[]</span><span class="whitespace"> </span><span class="name">declaredMethods</span><span class="whitespace"> </span><span class="operator">=</span><span class="whitespace"> </span><span class="name">c</span><span class="punctuation">.</span><span class="name attribute">getDeclaredMethods</span><span class="punctuation">();</span><span class="whitespace">
        </span><span class="keyword">for</span><span class="punctuation">(</span><span class="name">Method</span><span class="whitespace"> </span><span class="name">method</span><span class="whitespace"> </span><span class="punctuation">:</span><span class="whitespace"> </span><span class="name">declaredMethods</span><span class="punctuation">)</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">
            </span><span class="keyword">if</span><span class="whitespace"> </span><span class="punctuation">(</span><span class="name">method</span><span class="punctuation">.</span><span class="name attribute">getName</span><span class="punctuation">()</span><span class="whitespace"> </span><span class="operator">!=</span><span class="whitespace"> </span><span class="literal string">&quot;join&quot;</span><span class="punctuation">)</span><span class="whitespace">
                </span><span class="keyword">continue</span><span class="punctuation">;</span><span class="whitespace">
            </span><span class="name">System</span><span class="punctuation">.</span><span class="name attribute">out</span><span class="punctuation">.</span><span class="name attribute">println</span><span class="punctuation">(</span><span class="name">method</span><span class="punctuation">.</span><span class="name attribute">toString</span><span class="punctuation">());</span><span class="whitespace">
            </span><span class="keyword">try</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">
                </span><span class="name">Object</span><span class="whitespace"> </span><span class="name">result</span><span class="whitespace"> </span><span class="operator">=</span><span class="whitespace"> </span><span class="name">method</span><span class="punctuation">.</span><span class="name attribute">invoke</span><span class="punctuation">(</span><span class="name">c</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string">&quot;first&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string">&quot;second&quot;</span><span class="punctuation">);</span><span class="whitespace">
                </span><span class="name">System</span><span class="punctuation">.</span><span class="name attribute">out</span><span class="punctuation">.</span><span class="name attribute">format</span><span class="punctuation">(</span><span class="literal string">&quot;... invocation result (2 args): %s\n&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">result</span><span class="punctuation">);</span><span class="whitespace">
            </span><span class="punctuation">}</span><span class="whitespace"> </span><span class="keyword">catch</span><span class="punctuation">(</span><span class="name">IllegalArgumentException</span><span class="whitespace"> </span><span class="name">e</span><span class="punctuation">)</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">
                </span><span class="name">System</span><span class="punctuation">.</span><span class="name attribute">out</span><span class="punctuation">.</span><span class="name attribute">format</span><span class="punctuation">(</span><span class="literal string">&quot;... (2 args) %s\n&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">e</span><span class="punctuation">);</span><span class="whitespace">
            </span><span class="punctuation">}</span><span class="whitespace">
            </span><span class="keyword">try</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">
                </span><span class="name">Object</span><span class="whitespace"> </span><span class="name">result</span><span class="whitespace"> </span><span class="operator">=</span><span class="whitespace"> </span><span class="name">method</span><span class="punctuation">.</span><span class="name attribute">invoke</span><span class="punctuation">(</span><span class="name">c</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string">&quot;first&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string">&quot;second&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="literal string">&quot; - &quot;</span><span class="punctuation">);</span><span class="whitespace">
                </span><span class="name">System</span><span class="punctuation">.</span><span class="name attribute">out</span><span class="punctuation">.</span><span class="name attribute">format</span><span class="punctuation">(</span><span class="literal string">&quot;... invocation result (3 args): %s\n&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">result</span><span class="punctuation">);</span><span class="whitespace">
            </span><span class="punctuation">}</span><span class="whitespace"> </span><span class="keyword">catch</span><span class="punctuation">(</span><span class="name">IllegalArgumentException</span><span class="whitespace"> </span><span class="name">e</span><span class="punctuation">)</span><span class="whitespace"> </span><span class="punctuation">{</span><span class="whitespace">
                </span><span class="name">System</span><span class="punctuation">.</span><span class="name attribute">out</span><span class="punctuation">.</span><span class="name attribute">format</span><span class="punctuation">(</span><span class="literal string">&quot;... (3 args) %s\n&quot;</span><span class="punctuation">,</span><span class="whitespace"> </span><span class="name">e</span><span class="punctuation">);</span><span class="whitespace">
            </span><span class="punctuation">}</span><span class="whitespace">
        </span><span class="punctuation">}</span><span class="whitespace">
    </span><span class="punctuation">}</span><span class="whitespace">
</span><span class="punctuation">}</span>
</pre>
<p>(<em>Yes, it reminds me how much more elegant metaprogramming is in Python.
But Python has no method overloading</em>)</p>
<p>To my surprise (though in retrospect, it's obvious), arity also plays a
role in identifying methods in Java - notice how there are two methods
returned:</p>
<pre class="literal-block">
public static java.lang.String MethodOverloadingArity.join(java.lang.String,java.lang.String)
... invocation result (2 args): first second
... (3 args) java.lang.IllegalArgumentException: wrong number of arguments
public static java.lang.String MethodOverloadingArity.join(java.lang.String,java.lang.String,java.lang.String)
... (2 args) java.lang.IllegalArgumentException: wrong number of arguments
... invocation result (3 args): first - second

</pre>
<p>So in Java function overloading works the exact same way as it does in
Elixir (and based on my quick hallway research, in most other languages)
- an actual method is only identified by its name and arity (and in typed
languages, by type). Thus there is no dynamic method invocation based on
just its name.</p>
<p>So method overloading is just a convention, or if you wish to call it, a
hack.  I wish I learned of name and arity instead of method overloading
first!</p>
<p><em>This is yet another example why learning other languages benefits you even
if you won't end up using the new language in your day job!</em></p>
<p>With regardso to using method overloading, I think I prefer the Ruby/Python
approach - one name, one function, period. For most usecases, default argument
values allow for enough flexibility, and prevent abuse of this convention
(giving two wildly different implementations for the various overloads).</p>
<p><em>Disclaimer</em>: of course, I might still be entirely wrong. If so, please let
me know!</p>
<p>Also, I would like to thank <em>chrismccord</em>, <em>josevalim</em>, and <em>ericmj</em> from
the <cite>#elixir-lang</cite> IRC channel for patiently putting up with me and
helping me understand all this.</p>
</div>
</div>

          <hr />
          The post <a hef="http://blog.zsoldosp.eu/2014/02/08/what-elixir-taught-me-about-java-method-overloading-is-just-a-convention/">What Elixir Taught Me About Java - Method Overloading Is Just a Convention</a> first appeared on <a href="http://blog.zsoldosp.eu">http://blog.zsoldosp.eu</a>.
        ]]></content:encoded>
    </item>
  </channel>
</rss>
