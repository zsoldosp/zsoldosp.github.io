<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Do. Reflect. Learn. Repeat!</title>
    <link>http://blog.zsoldosp.eu</link>
    <description>Excercises in public learning</description>
    <pubDate>Mon, 30 Sep 2013 07:21:55 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>CITCON Turin 2013</title>
      <link>http://blog.zsoldosp.eu/2013/09/30/citcon-turin-2013/</link>
      <pubDate>Mon, 30 Sep 2013 09:13:00 CEST</pubDate>
      <category><![CDATA[conferences]]></category>
      <category><![CDATA[citcon]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">HBw_qzJLfvKDJyuEPItoFPtvMx8=</guid>
      <description>CITCON Turin 2013</description>
      <content:encoded><![CDATA[<blockquote>
<p>Prior <a href="http://citconf.com/">CITCON</a> experience posts:</p>
<ul>
<li><a href="/2010/11/my-citcon-london-2010-experience.html">London 2010</a></li>
<li><a href="/2011/11/citcon-london-2011.html">London 2011</a></li>
<li><a href="http://citconf.com/budapest2012">Budapest 2012</a> - didn't get around
  to blog about it - since I was the local organizer, by the end of 
  the conf I depleted my energy reserves :)</li>
</ul>
</blockquote>
<p>Briefly about the conference - the open space format is still the best
thing since sliced bread as far conferences go, and CITCON still brings
together wonderfully smart people. Year after year I leave it being 
thankful for pointing me to questions (and answers) waaay outside the 
proverbial box....</p>
<h2 id="sessions-attended">Sessions attended</h2>
<p>This post does not contain session notes (I'm adding them to the 
<a href="http://citconf.com/wiki/">wiki</a>) but rather just tries to convey the atmosphere/feel
of the sessions.</p>
<ul>
<li>
<p><strong>Are we doing improvement wrong</strong>? Proposed by <a href="https://twitter.com/Jeffrey">Jeffrey</a>, 
  inspired by the <a href="http://www.amazon.com/Toyota-Kata-Managing-Improvement-Adaptiveness/dp/0071635238/">Toyota Kata</a> book, it described the two 
  Katas, and illustrated why measuring improvement by the output 
  (results) only can lead to missed improvement opportunities (e.g.: the
  book describes that before an improvement effort, line managers were 
  called in for troubleshooting 1000 times a shift, which then decreases
  two 700 a shift. The leadership's response was that this means either</p>
<ul>
<li>people are hiding or working around failures, which is bad</li>
<li>people stopped improving, which is bad too</li>
</ul>
</li>
</ul>
<p>so they adjusted the workload to enable taking full advantage of
  the bandwidth of 1000 improvements/introspections the factory was
  capable of.</p>
<ul>
<li>
<p><strong>Continuous interruptions</strong> Proposed by <a href="https://twitter.com/KishenPanday">Kishen</a>, we dug deep
  into how interruptions can be a wonderful tool for knowledge sharing,
  mentoring and how they hide (or to be more precise, expose) risk 
  factors. I wish I had mentioned the urban legend about <a href="https://en.wikipedia.org/wiki/QWERTY#cite_ref-5">the QWERTY 
  keyboard layout's design origin</a>, but the point about 
  interruptions slowing you down enough to force taking a step back 
  didn't need analogies. And it seems we all have colleagues whose cell
  phones only ring when their owners, unlike the phones, are not 
  present...</p>
</li>
<li>
<p><strong>What does the ideal software development process look like?</strong> 
  proposed by <a href="https://twitter.com/aparker42">Andrew Parker</a>, closely linked to the first
  session of the day about improvement (towards the ideal one to one
  flow) is probably the one session that I left with more questions
  than answers - not just about the topic, or its conclusions (shorten
  the cycle time (effort) required for going from idea to getting
  feedback), but even about the open spaces framework (what if the 
  scribe wants to apply the law of two feet?).</p>
</li>
<li>
<p><strong>Low level unit testing/assertion code patterns</strong> proposed by me,
  driven by my desire to learn what new ideas are present in this
  space. While I haven't learned of any new patterns, I left with a 
  much better understanding of how language embedded and enforced pre-
  and post-conditions (or code contracts in the C# world) can actually
  been tested, contrary to my initial assumption</p>
</li>
<li>
<p><strong>Are we testing too much? / What's the point of code coverage? /
  Would a Test Tree Builder and Executor make sense?</strong> - this was a 
  merge of three topics, proposed by <a href="https://twitter.com/KishenPanday">Kishen</a>, <a href="https://twitter.com/ajmolenaar">Arjan</a>,
  and myself. It was the smallest session in attendance (it was the
  three of us and <a href="https://twitter.com/sietstweets">Cirilo</a>, with <a href="https://twitter.com/Jeffrey">Jeffrey</a> also popping by
  towards the end), but true to the spirit of open spaces, we were
  totally engaged. Plus <a href="https://twitter.com/Jeffrey">Jeffrey</a> demonstrated the need for more
  effectively transmitting information (when we brought him up to speed
  of what is being discussed, he just said "CITCON Australia 2009") or
  prior art - there is a kind of generational gap that exists between 
  programmer generations that could benefit from a few more bridges
  (though leaving enough of a divide so that people will still work on
  and solve problems that were previously declared "unsolvable"!).</p>
</li>
</ul>
<p>Had I not proposed any sessions, I would have loved to attend <em><a href="https://twitter.com/sf105">Steve 
Freeman</a>'s TDD Clinic</em> - it's always a pleasure to see great 
people perform, not to mention the learning opportunity. I also would
have liked to listen to <em><a href="https://twitter.com/ivanrmoore">Ivan Moore</a> describing the build setup
they have for their multi componented system</em> at work - I faced that 
problem years ago, topped with the plugin compatibility across multiple
versions problem, so would have loved to see what they did. And next 
time I'm in Budapest, I'll probably try to visit <a href="http://prezi.com">Prezi</a> again 
in case Jayson is around so I could take another look at their <code>fkt</code> 
system (and to listen to the <em><code>please</code>, <code>simply</code>, and <code>fkt</code> machine 
provisioning evolution story</em> again).  Luckily, <a href="https://twitter.com/zeljkofilipin">Zejko</a>'s 
session's about how <a href="https://wikipedia.org/">Wikipedia</a> tests there system is easy to
find online, since - like everything else <a href="https://wikipedia.org/">Wikipedia</a> does -,
it is open. But as I always say, it's so much better to leave a conf 
with too many good sessions than one with too little...</p>
<p>Another great aspect of CITCON is the dinner afterwards - even though
it splits into multiple small groups, it's real nice to talk with people
directly, both about non-tech (like explaining why it would
make a ton of sense for the Budapest Opera House to organize a summer
Opera festival) and tech (thanks to all who listened to my pet project 
ideas, and gave really useful feedback!)</p>
<p>The reunion-like feeling <a href="https://twitter.com/PaulJulius">PJ</a> mentioned during his opening remarks
was true for me too, but sadly I haven't prepared enough - I should have
organized more explicit catch-up sessions outside the conference, for I
couldn't chat with everyone I wanted to in enough depth - hard to do
when we are running additional sessions even during the lunch break!
Plus of course one doesn't want to give the conference itself an 
exclusive atmosphere - I still vividly remember my nervousness at my 
first CITCON, trying to overcome the inherent shyness to talk to people,
attempting to join their conversations...</p>
<p>In closing, I would like to thank <a href="https://twitter.com/capotribu">Marco Abis</a> again, who was
the remote-local organizer of the conference, for making it happen. I 
met wonderful new people, and learned (or refined my understanding) of 
many topics!</p>
<p>During the coming days, I will be adding my session notes to the 
<a href="http://citconf.com/wiki/">conf wiki</a> coming days, and once I digested all the feedback I 
got during and outside the sessions, I will be writing up the <em>Tree 
Optimized Test Runner</em> and the <em>app-test DSLs to have multiple drivers
for a single TestCase</em> ideas in more detail.</p>
<!-- temporary update for technorati: KSD8APRKH6JR  -->
]]></content:encoded>
    </item>
    <item>
      <title>Teach me refactoring from my commits!</title>
      <link>http://blog.zsoldosp.eu/2013/09/27/teach-me-refactoring-from-my-commits/</link>
      <pubDate>Fri, 27 Sep 2013 09:40:00 CEST</pubDate>
      <category><![CDATA[things i wish existed]]></category>
      <category><![CDATA[teaching]]></category>
      <category><![CDATA[untested ideas]]></category>
      <category><![CDATA[version control]]></category>
      <category><![CDATA[refactoring]]></category>
      <guid isPermaLink="false">GZ4JOnYZvQe5D8VUfKUh6eJAlkw=</guid>
      <description>Teach me refactoring from my commits!</description>
      <content:encoded><![CDATA[<p>I find it hard to learn purely by abstract theory - I need practical 
examples to illustrate the theory I just learned. I also need practice,
and preferably, supervised practice, so my mistakes can be caught early
and/or more efficient ways can be shown to achieve the same thing I just
did.</p>
<p>With this background, it's not surprising that when I <a href="http://episodes.gitminutes.com/2013/06/gitminutes-14-pablo-santos-on.html">heard about a 
product that started to do semantic diffs for version 
control</a> I was reminded of the <a href="https://sc2010subs.wordpress.com/2010/08/13/refactoring-golf-dave-cleal-ivan-moore/">Refactoring 
Golf</a> concept from the first <a href="http://www.codemanship.co.uk/parlezuml/softwarecraftsmanship/">Software Craftsmanship 
London</a> conference - and the two ideas just clicked into this
great (ok, I'm biased) idea to try to derive the most efficient
refactoring steps for that particular commit I just made.</p>
<p>The pieces required for this project are all already in place:</p>
<ul>
<li>we have parsers for languages, and many are available as libraries to
  traverse <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">ASTs</a></li>
<li>most version control systems have libraries to read from them</li>
<li>there are tons of well-defined refactorings known, that can be used
  as operations in the transformations from state <code>A</code> to <code>B</code></li>
<li>optimization algorithms are plentiful - for a proof of concept, the
  <a href="https://en.wikipedia.org/wiki/String_distance">String Distance</a> Transformation algorithm could be used</li>
</ul>
<p>Thus such a program script could be added as a post commit hook, or 
simply could be run on the workspace copy, using the diff against last
committed version, and it could tell me that I might have:</p>
<ol>
<li>renamed variable <code>login</code> to <code>username</code></li>
<li>converted <code>username</code> from local variable to method parameter</li>
<li>extracted method <code>lock_customer_acocunt</code> from method <code>login</code></li>
</ol>
<p>I'm pretty positive even experienced refactoring practitioners could 
learn new tricks, and newbies would be delivered concrete refactoring
examples tailored to their very codebase.</p>
<p>Please, someone with enough free time, go and make such an app!</p>
<p>Does this idea make sense for you too, or just me? Let me know via email
(hello at site domain) or on twitter (<a href="https://twitter.com/zsepi">@zsepi</a>)!</p>]]></content:encoded>
    </item>
    <item>
      <title>Quick script to help reporting bugs for python</title>
      <link>http://blog.zsoldosp.eu/2013/09/11/quick-script-to-help-reporting-bugs-for-python/</link>
      <pubDate>Wed, 11 Sep 2013 17:00:00 CEST</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[note to self]]></category>
      <category><![CDATA[bash]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">-y0sMmjTXW82o3McTP9I6l_Hh4k=</guid>
      <description>Quick script to help reporting bugs for python</description>
      <content:encoded><![CDATA[<div class="document">
<p>While poking around the
<a class="reference external" href="https://pypi.python.org/pypi/testrepository/">testrepository</a>
package I ran into the cryptic error message of <strong>'unicodeescape'
codec can't decode bytes in position 56-57: truncated \uXXXX escape</strong>.
I set out to reproduce the bug, but that is of course an iterative
process, like anything else in coding, so I set out to script it. Since
I expect I'll need this again, and someone else might need it too,
I'm recording it here.</p>
<div class="note">
<p class="first admonition-title">Note</p>
<p>I eventually figured out the problem was that <a class="reference external" href="http://testrepository.readthedocs.org/en/latest/MANUAL.html#python">the recommended
default for testrepository</a>
has a different command line behavior from the built in unittest's
runner:</p>
<blockquote>
<ul class="simple">
<li><tt class="docutils literal">python <span class="pre">-m</span> unittest discover bugrepro</tt></li>
<li><tt class="docutils literal">testr run bugrepro</tt> doesn't get translated to the discover
root, but into <tt class="docutils literal">LISTOPT</tt> variable (<tt class="docutils literal">python <span class="pre">-m</span> subunit.run
discover . $LISTOPT $IDOPTION</tt>)</li>
</ul>
</blockquote>
<p class="last">Sure, a nicer exception message would have been nice.</p>
</div>
<div class="section" id="my-environment">
<h1>My Environment</h1>
<p>While for serious development I use Linux VMs, for explorations/hobbies,
I use the base Windows 7 on my command line from git-bash - it's enough
for basic scripting things, plus I tend to use git anyway, and I don't
like Powershell.</p>
</div>
<div class="section" id="the-script">
<h1>The script</h1>
<pre class="code bash literal-block">
<span class="c">#!/bin/sh
</span><span class="k">function </span>d<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&quot;\$ $*&quot;</span>
    <span class="nv">$*</span>
<span class="o">}</span>

<span class="k">function </span>win_info<span class="o">()</span> <span class="o">{</span>
    systeminfo | grep <span class="s2">&quot;\(OS Name\|OS Manufacturer\|System Type\|Locale\)&quot;</span>
<span class="o">}</span>

<span class="nv">REPRO_FOLDER</span><span class="o">=</span>bugrepro
d win_info
d python --version
d pip freeze
d git --version
d grep ^ -nH <span class="sb">`</span>find <span class="nv">$REPRO_FOLDER</span> -name <span class="se">\*</span>.py<span class="sb">`</span>
d python -m unittest discover <span class="nv">$REPRO_FOLDER</span>
d ls .testr* -l
d cat .testr.conf
d testr run <span class="nv">$REPRO_FOLDER</span>
d testr run
</pre>
<p>Running <tt class="docutils literal">./bugrepro.sh <span class="pre">2&gt;&amp;1</span> | tee bugrepro.txt&nbsp; &gt; /dev/null</tt> produces
the following output (cropped, you can see
<a class="reference external" href="/snippets/bugrepro.txt">the full output here</a>):</p>
<pre class="literal-block">
$ win_info
OS Name:                   Microsoft Windows 7 Professional 
OS Manufacturer:           Microsoft Corporation
System Type:               x64-based PC
System Locale:             en-us;English (United States)
Input Locale:              en-us;English (United States)
$ python --version
Python 2.7.4
$ pip freeze
extras==0.0.3

</pre>
</div>
<div class="section" id="things-i-learned">
<h1>Things I learned</h1>
<p>While this took somewhat longer than expected (and writing this
post wasn't even planned!) and I haven't even reported the actual
bug yet (Yak shaving...), but I don't mind - especially because I
did all this while recovering from a nasty cold :)</p>
<ul class="simple">
<li>for <tt class="docutils literal">cmd.exe</tt>, the <tt class="docutils literal">ver</tt> and <tt class="docutils literal">systeminfo</tt> commands are pretty neat
and <a class="reference external" href="http://www.windows7password.net/all-windows-7-commands-cmd-exe/">there are more commands</a>:
type <tt class="docutils literal">help</tt></li>
<li>wrote my first blog post in
<a class="reference external" href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>
since it's a better fit for including snippets (<a class="reference external" href="/2010/08/executable-documentation.html/">executable
documentation</a> is a pet peeve of mine!)</li>
</ul>
<p><strong>Open Questions</strong> (aka: do I want to shave further yaks?!):</p>
<ul>
<li><p class="first"><tt class="docutils literal">cmd.exe /C</tt> doesn't seem to behave as one would expect it when
invoked from git-bash (msysgit, 1.8.1) - it doesn't exit and the
execution to continue requires an <tt class="docutils literal">exit</tt> command!</p>
</li>
<li><p class="first">I always want to do
<a class="reference external" href="/2013/07/25/some-metaprogramming-reflection-in-bash/">metaprogramming in bash</a>
- how could I display
the body of a bash function? I'm thinking of something similar to
what one does with alias</p>
<pre class="code bash literal-block">
<span class="nv">$ </span><span class="nb">alias </span><span class="nv">foo</span><span class="o">=</span><span class="s1">'echo foo'</span>
<span class="nv">$ </span>foo
foo
<span class="nv">$ </span><span class="nb">alias </span>foo
<span class="nb">alias </span><span class="nv">foo</span><span class="o">=</span><span class="s1">'echo foo'</span>
</pre>
</li>
<li><p class="first">is there a better way for passing arguments in bash? I ended up doing
<tt class="docutils literal">grep ^</tt> because I went crazy trying to escape
<tt class="docutils literal"><span class="pre">find...</span> <span class="pre">-exec...\;</span></tt>.
and making the script use <tt class="docutils literal"><span class="pre">#!/bin/bash</span> <span class="pre">-x</span></tt> would be an overkill
here, and I just want to echo back the command that was executed...</p>
</li>
</ul>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Own your data (or why did I move away from Blogger and WordPress?)</title>
      <link>http://blog.zsoldosp.eu/2013/08/04/own-your-data-or-why-did-i-move-away-from-blogger-and-wordpress/</link>
      <pubDate>Sun, 04 Aug 2013 14:25:00 CEST</pubDate>
      <category><![CDATA[blog]]></category>
      <category><![CDATA[outdoors]]></category>
      <category><![CDATA[data]]></category>
      <category><![CDATA[ownership]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">8UAjTLJV0td1NxR0DNBSZhVVots=</guid>
      <description>Own your data (or why did I move away from Blogger and WordPress?)</description>
      <content:encoded><![CDATA[<p>This blog used to be two separate blogs, hosted at 
<a href="http://blogger.com">Blogger</a> and <a href="http://wordpress.com">WordPress.com</a>,
respectively. I've gone through some trouble to migrate their content,
hopefully without breaking urls to this <a href="http://blogofile.com">Blogofile</a> 
based setup. In the process, I have lost a considerable number of 
features and conveniences - so why did I do this?</p>
<h2 id="owning-my-data-and-platform">Owning my data and platform</h2>
<p>As the saying goes, there is no such thing as a free lunch (or put more
bluntly, if you are not paying for it, <em>you</em> are the product being 
sold). A prime example is <a href="http://wordpress.com">WordPress.com</a>, which reserves the
right to display ads on your freely hosted blog, while <a href="http://blogger.com">Blogger</a>
probably enhances their advertisement profile of you - I don't know.</p>
<p>Even if these platforms don't do anything bad at the moment, they can
pretty much change the features available to you, or any other aspects
of their terms of service - remember that story about the 
<a href="http://news.cnet.com/8301-1023_3-57560370-93/instagram-rolls-back-terms-of-service-after-ownership-dustup/">Instagram ToS change regarding commercial use of your photos</a>?
Sure, it turned out to be a misunderstanding and/or they backed down,
but theoretically they can do it.</p>
<p>Of course, this wasn't a concern when I started out with blogging, but 
certainly is something to consider now that I am nearing post #42. </p>
<p>These considerations are of course applicable for other service 
providers beyond blogging, e.g.:</p>
<ul>
<li>(sports) tracking applications - while I have not yet gotten around 
  to building up a website like <a href="http://www.susi-ralf.de/index.html">Suzi &amp; Ralf</a>, but I know 
  eventually I will want to create something with the trails of all the
  places I've been to, whether for fun or for an anniversary gift or
  similar - and most sites make it rather hard to export your data 
  conveniently (<a href="http://endomondo.com">endomondo</a> is particularly annoying, so I'm 
  real grateful for the easy zip-export of <a href="http://runkeeper.com">runkeeper</a>!)</li>
<li>social networks - does <a href="http://linkedin.com">LinkedIn</a>, <a href="http://facebook.com">Facebook</a>, 
  <a href="http://xing.com">Xing</a>, etc. allow you to easily export your contacts and their
  contact details? I would be pretty upset to find myself without a 
  personal copy of that data</li>
</ul>
<p>Of course, I keep using services hosted by others, but I try to make 
sure I use one with a friendly <a href="http://www.dataliberation.org/">data liberation</a>
policy!</p>
<h2 id="other-considerations">Other considerations</h2>
<ul>
<li><strong>backup</strong> - sure, it's almost a repeat of the prior point, but worth 
  noting. It doesn't happen as often as before, but there is always the
  possibility of <a href="http://blog.theoldreader.com/post/56209408824/important-update">data loss or service outage</a></li>
<li><strong>version control</strong> - being a software developer, this is almost 
  second nature to me - it's incredibly liberating to be able to throw
  all my changes away and go back to a previous, known good version of
  a post draft.</li>
<li><strong>offline authoring</strong> - I do a lot of my writing and hobby coding 
  during my train commute, with spotty internet connection at best.
  Working locally on my laptop with my favorite text editor beats any
  online editor widget. </li>
<li><strong>full customizations</strong> - sure, probably there is a WordPress plugin
  for anything I would want to do, but for a lot of the small checks, 
  it takes longer to find, learn, and configure the one I need than
  to implement it in <a href="http://python.org">python</a> - e.g.: checking the site for
  broken links, custom reports, etc. I should probably mention the html
  template customizations here too, though you might be able to tell
  that is not yet the highest priority for me :)</li>
</ul>]]></content:encoded>
    </item>
    <item>
      <title>Some Metaprogramming (Reflection) In Bash</title>
      <link>http://blog.zsoldosp.eu/2013/07/25/some-metaprogramming-reflection-in-bash/</link>
      <pubDate>Thu, 25 Jul 2013 08:18:00 CEST</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[metaprogramming]]></category>
      <category><![CDATA[bash]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">SrLBQ0AP18Vcd0lyROK5o6cmGI0=</guid>
      <description>Some Metaprogramming (Reflection) In Bash</description>
      <content:encoded><![CDATA[<p>I needed to write a function in bash that would set an environment 
variable to that value, unless the variable has been already set. 
This is a typical metaprogramming (reflection, introspection, etc.) 
task. </p>
<p>However, searching for the terms I know (reflection, metaprogramming) 
did not yield any bash results, since the bash terminology is <em>variable
variable</em> or <em>dereferencing</em>. I hope the title of this post will help
other non-native bash script writers searching for the "wrong" keywords!</p>
<p>The trick is the <code>${!&lt;variable name&gt;}</code> construct - it will be interpreted
as <code>${&lt;variable name's value&gt;}</code>. An example</p>
<pre><code>$ a="aaaaa"
$ b="bbbbb"
$ echo $a
aaaaa
$ echo $b
bbbbb
$ variable_name="a"
$ echo ${!variable_name}
aaaaa
$ variable_name="b"
$ echo ${!variable_name}
bbbbb
</code></pre>
<p>Of course, I could only find it offline (thanks, <a href="https://www.xing.com/profiles/Dieter_Loskarn">Dieter</a>!). 
Armed with this kowledge, the function itself becomes easy -</p>
<pre><code>function env_or_default() {
    name=$1
    default=$2
    if [[ ${!name} == "" ]]; then
        echo "no value set for $name, setting it to default value $default"
        export $name=$default
    else
        echo "value for $name was passed in from the environment, it's value is ${!name}"
    fi
}
</code></pre>
<p>Obviously, the <code>echo</code> lines are there just for illustration.</p>
<pre><code>$ env_or_default NOT_SET not-set-default-value
no value set for NOT_SET, setting it to default value not-set-default-value
$ export ALREADY_SET=already-has-value
$ env_or_default ALREADY_SET already-set-default-value
value for ALREADY_SET was passed in from the environment, it's value is already- has-value
$ echo $NOT_SET
not-set-default-value
$ echo $ALREADY_SET
already-has-value
</code></pre>
<p>Happy scripting! </p>
<p>P.S.: Krzysztof Wilczynski showed another <a href="https://gist.github.com/kwilczynski/5877621">trick to do 
this</a>:</p>
<pre><code>random_file_name() {
    local __return=$1
    eval $__return="'$(date +"$(basename -- "$0")_%s_${RANDOM}_$$")'"
}

random_file_name FILE_NAME
echo $FILE_NAME
</code></pre>]]></content:encoded>
    </item>
    <item>
      <title>Opening the 2013 paddling season on the Kocher</title>
      <link>http://blog.zsoldosp.eu/2013/03/10/opening-the-2013-paddling-season-on-the-kocher/</link>
      <pubDate>Sun, 10 Mar 2013 17:08:36 CET</pubDate>
      <category><![CDATA[outdoors]]></category>
      <category><![CDATA[canoe]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2013/03/10/opening-the-2013-paddling-season-on-the-kocher/</guid>
      <description>Opening the 2013 paddling season on the Kocher</description>
      <content:encoded><![CDATA[
I've just posted a brief description of our first trip of the season over at the <a href="http://www.songofthepaddle.co.uk/forum/showthread.php?40272-Opening-the-2013-season-on-the-Kocher-Braunsbach-to-K%FCnzelsau&amp;p=465323">Song of the Paddle</a> forum, check it out!]]></content:encoded>
    </item>
    <item>
      <title>Continuous Team Switching?</title>
      <link>http://blog.zsoldosp.eu/2013/01/continuous-team-switching.html</link>
      <pubDate>Sat, 19 Jan 2013 13:35:00 CET</pubDate>
      <category><![CDATA[culture]]></category>
      <category><![CDATA[programming]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2013/01/continuous-team-switching.html</guid>
      <description>Continuous Team Switching?</description>
      <content:encoded><![CDATA[
<a href="http://douglassquirrel.com/">Douglas Squirrel</a> led <a href="http://www.citconf.com/wiki/index.php?title=Continuous_rewriting">a session at CITCON Budapest 2012 about Continuous Rewriting</a>, summarizing many ideas I've heard before from <a href="http://vimeo.com/43659070">Dan North</a> or <a href="http://forwardtechnology.co.uk/videos/32447325">Fred George</a> presentations into a really coherent evolutionary progression,  and took the concept even further. <br/><br/>Like other <em>Continuous</em> practices, this would be as much a  technical as an organizational-cultural change. It got me thinking about how this would change the team dynamics - not just inside a team, but in the context of the bigger organization.<br/><br/>The various <em>Continuous</em> practices always came about the realization that when something is rarely done, people will be bad at it and thus  it will be hard, ineffective and error prone. Thus if we simply do it  more often, we would get better at it.<br/><br/>Joining a new team and becoming an effective contributor is a process that is in need of improvement (on most teams). Getting to grips with the inherent domain complexity and the piled on technical complexity, learning the tricks and workarounds, etc. can hold back someone from being efficient for quite a while. On the other hand, having a fresh set of eyes can provide  a new perspective and expose much of the technical debt the team has.<br/><br/>All the continuous rewrite examples so far have reduced the code size, making it understandable (though often this reduction came thanks to better understanding of the domain).<br/><br/>Assuming the reduced code size enables speedier onboarding of new team members,  while still benefiting from the new perspective it brings, what would  more frequently rotating in and out rotation team members (while never completely  replacing any one team) result in?<br/><ul><li>Could this make spreading of ideas and practices within a company    more effective and faster than the current silo'd, departmental setups?</li><li>Would it speed up the on the job, just in time learning of every<br/>  developer in the company?</li><li>Would it improve the skill level of every developer, or would it   drag everyone down?</li><li>Would it strengthen the company culture, simply since each person    would know more other employees (given that many of us only socialize    within our own team)? </li><li>Would it spark more cross-departmental improvements - unlike    accountants or marketers, developers can jump between various areas    and domains of the company with relative ease, and thus could see    potential improvements. Would this make crazy IT processes (where the data   passes through, without enhancement, several different teams and applications,   modified effectively by only one at the middle, then be loaded back into    the original source) extinct, making IT governance easier?</li></ul>I don't know. But it certainly was a fun thought experiment! Feel free to add questions to the above list in the comments!
<hr><ol>
<li id="1">
    <strong><a href="http://www.odd-e.com">Steven</strong></a> on <em>2013/01/19 15:42:41</em>: There are studies found that stable teams can improve as long as 3 years. From that I would recommend stable teams over switching team members in and out.
<ol>
<li id="1-1">
    <strong><a href="/">Peter Zsoldos</strong></a> on <em>2013/01/19 17:08:12</em>: Steve,<br/><br/>thanks for the input! Could you give some pointers for these studies (titles or links)?<br/><br/>I don't understand your second sentence (not a native English speaker) - you suggest that based on these studies, having a stable team is better/more effective/etc. than having constantly changing team members (the thought experiment of this post)?
</li></ol></li><li id="2">
    <strong><a href="http://tamasrev.wordpress.com/">tamasrev</strong></a> on <em>2013/01/21 21:22:23</em>: Wow, this makes sense.<br/><br/>Let me add some anecdotal evidence: Every time I'm joining a team, I start to see tons of technical debt. Later I'm getting used to it. Sometimes I even miss the old code when switching to something new. This is the thing that makes _some_ outsourcing veterans (i.e. EPAM alumni) very efficient.
</li><li id="3">
    <strong><a href="/">Peter Zsoldos</strong></a> on <em>2013/01/23 20:38:18</em>: what is the thing that makes outsourcing veterans efficient? The ability to enter any codebase and identify the place(s) that need changing for the new feature/project? <br/><br/>To add to the anecdotes (hoping @jasongorman doesn't read comments :)) - you don't need outsourcing for that, enough if you work on maintenance teams that are responsible for more than one application. Though it might be more a question of attitude and/or confidence than experience with switches. E.g.: I never hesitate to follow a stacktrace into 3rd party code (or find out why I *don't* have a stacktrace) or simply load the source to compensate the unhelpful documentation. Kind of like the difference between junior and senior developers is that the latter are not afraid to voice their opinions/questions...
</li><li id="4">
    <strong><a href="http://tamasrev.wordpress.com/">tamasrev</strong></a> on <em>2013/01/29 19:37:44</em>: Didn't the blog just swallowed my comment? Here it is again:<br/><br/>What makes outsourcing veterans very efficient that they have to work with and maintain several projects written by other people. They will learn both continuously improve the code as well as do fuckin quick fixes. They also learn how to adapt to different coding styles they see in their project pool. They can relatively quickly identify the problematic parts of a codebase and they can come up with change suggestions. However, a typical outsourcing consumer isn't interested in their opinion.<br/><br/>It's worth to mention that outsourcing veterans only have a *chance* to learn all this stuff. They can also burn out due to the mind-numbing tasks they have to do.
</li></ol>
]]></content:encoded>
    </item>
    <item>
      <title>Global Day of Coderetreat 2012 - Nuremberg</title>
      <link>http://blog.zsoldosp.eu/2012/12/global-day-of-coderetreat-2012-nuremberg.html</link>
      <pubDate>Thu, 20 Dec 2012 09:30:00 CET</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[organizing]]></category>
      <category><![CDATA[community]]></category>
      <category><![CDATA[code retreat]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2012/12/global-day-of-coderetreat-2012-nuremberg.html</guid>
      <description>Global Day of Coderetreat 2012 - Nuremberg</description>
      <content:encoded><![CDATA[
<br/><br/><header> <div id="global-day-of-coderetreat-2012-nuremberg"></div></header><div class="post_prose"><blockquote>If you are not familiar with the concept of a  <a href="http://coderetreat.org/">code retreat</a>, listen to this  <a href="http://www.dotnetrocks.com/default.aspx?showNum=728">podcast</a> (or read the  <a href="http://s3.amazonaws.com/dnr/dotnetrocks_0728_corey_haines.pdf">transcript</a>).</blockquote>As you may remember, I've attended <a href="/2012/09/my-first-code-retreat-legacy-code.html">my first code retreat earlier this year in Frankfurt</a>. One of the reasons for attending was  that I had a nagging thought throughout organizing <a href="http://citconf.com/budapest2012/">CITCON Budapest</a> that I should do something locally too, and a coderetreat sounded just like the perfect thing. So I've came back with enough enthusiasm from Frankfurt to approach our CEO (Dirk) about <a href="http://www.paessler.com/">Paessler AG</a> helping me organize one in Nuremberg - and he offered the office to host it in and to pay for the lunch. Thus  the biggest obstacle was cleared.<br/><blockquote>The importance of this couldn't be emphasized. As I've seen on the <a href="http://globalday.coderetreat.org/">Global Day of Coderetreat</a> organizers' list, it has caused some headache and  worry for fellow hosts. And in addition to the fiscal support, my  colleagues went way beyond anything I expected - our sysadmins arranging the required technical &amp; security infrastructure, running <a href="http://www.paessler.com/blog/2012/11/21/other/paessler-is-one-of-the-hosts-of-the-global-day-of-coderetreat">the GDCR event on the  company blog</a>, and even non-programmer colleagues offering to  come by Saturday to help with anything if needed.  Thank you all, you made it really easy! (by the way, <a href="http://www.paessler.com/company/jobs">Paessler is hiring!</a>)</blockquote>Anyhow, this post will not be about the organization process, but about what I have learned on this day as a co-facilitator &amp; participant about code and people.<br/><blockquote>Another big thanks goes to <a href="http://twitter.com/marcoemrich">Marco Emrich</a>, a seasoned coderetreat facilitator, who helped getting the event off the ground and helped me getting  started facilitating (thanks to <a href="https://twitter.com/NicoleRauch">Nicole</a> &amp; <a href="http://twitter.com/Ookami86">Johannes</a>  for introducing me to Marco!)</blockquote>The attendance was low (next time we'll schedule the start 30-60 minutes later), but I was surprised to learn how well the coderetreat functioned with so few participants. To ensure there is enough variety and that people have new pairs, we took turns with Marco coding (which we planned anyway in case of odd number of participants).<br/><h2 id="the-sessions">The Sessions</h2><ol><li>no constraints, getting familiar with the problem</li><li><a href="https://github.com/zsoldosp/zsoldosp-dotfiles/blob/master/bin/snippets/python/unitsofmeasure.py">no primitives</a> &amp; focus on the rules (fake out the world if needed at all)</li><li>Ping-Pong TDD &amp; naive implementation (with a switch at half time)</li><li>no conditional &amp; no mouse</li><li>baby steps</li><li>free to choose session</li></ol><h2 id="its-the-global-day-of-coderetreat">It's the <strong>Global</strong> Day of Coderetreat</h2>Even though we were only a few people here, it's been great to chat to the others elsewhere worldwide, saying hi to people doing exactly the same thing we do, just in various other  locations. While there were audio problems sometime, we didn't mind it. And next year we won't  bother with trying to schedule exact times for the calls, since we all will miss those times  anyway, but rather just rely on improvising video calls.<br/><h2 id="code-related-observations">Code Related Observations</h2><ul><li>It's really interesting to see other people programming. It is certainly not    something one gets to do during their day jobs (except maybe trainers, team leads, and mentors).   It is even more interesting to contrast the external observer's impressions/understanding   with the understanding of the people involved in the programming - the difference can be   huge. This might help understanding how many developers feel bosses/managers always misunderstand   their progress...</li><li>It's also interesting to track people across the different pairs and see whether    they bring their firm opinions (battle scars?) to each session or let go of them    to allow the opportunity to learn a different approach. This is not necessarily a bad    thing, but if you have plans to learn, beware of this and be explicit what you want to    learn - know whether you want to explore one idea and bounce it off/get it challenged by    many people or whether you want to simply see how others program and see if any of that    could be applicable to you. E.g.: it was pretty interesting to see how my F#/Scala inspired   ideas (case classes &amp; types) could be materialized in clojure. However, I have certainly   learned less about clojure than I would have had I let my partner do it as he would   in clojure natively (though the <em>no primitives</em> restriction was screaming   for types in my opinion).</li><li>We developers are really creative at finding (or at least looking for) loopholes in the   constraints. During the <em>no conditional</em> session one pair TDD'd a function returning a boolean   and claimed they had no conditionals in their code and were trying to convince us that   even the rest of the system wouldn't need conditionals to use this code... Or that returning   booleans is not an issue since they could refactor it into something that doesn't need to    return booleans once they get to the rest of the system... I'm certainly looking forward running    a <em>no return values allowed</em> session and see how people will circumvent that (and rationalize it   away)!</li><li>The longer you have worked with a tool/language, the more readily you accept and work around   its quirks. When we wanted to structure our tests the way we would describe <a href="https://en.wikipedia.org/wiki/Conway's_Game_of_Life">the four rules   of Conway's Game of Life</a> in writing (heading, then four subheadings, and then the concrete    examples under the subheadings) it didn't match RSpec's expectations at all. We agreed that both    structures (RSpec vs. the natural) make sense and we can understand how &amp; why RSpec evolved this way,   but we couldn't make it match the natural structure. This lead to a nice brief discussion about when    you want to deviate from standard tooling/processes and when one is better off following it.</li><li>Some people just can't put off the desire to finish the task. I will have to be conscious of this   in the future, and prod people more - e.g.: to ask whether this test &amp; app code meets their definition of   perfect.</li><li>Sometimes when things are hard, it is an indication that you are doing the wrong thing or solving the   wrong problem. E.g.: I wanted to write a test for our function to ensure that the function fails unless    it gets exactly 8 parameters (number of neighbors) but we were not supposed to use primitives. It felt   like enlightenment when my pair pointed out that there is nothing in the rules that mandate that requirement!</li><li><a href="http://www.infoq.com/presentations/TDD-as-if-You-Meant-It">TDD as if you meant it</a> is really hard unless both of you are good at the chosen   language. I assumed Ruby and Python are rather similar, but learned quickly it is not the    case. While we had great conversations during the session, and I've learned some interesting things about   Ruby, we have not made much progress with the actual constraint.</li><li>It seems most people work on their desktop machines/docking stations, and thus their laptop is   a secondary device, where they have not invested in their environments that much, and thus   the no mouse constraint is much harder (e.g.: having ReSharper installed at work, but not on   the personal laptop).</li></ul>... and I could go on much longer :) Certainly, the coderetreat format is great, and I enjoyed both programming and facilitating (though the fact my German is not strong enough makes it somewhat difficult),  and I'm sure we'll do more coderetreats in Nuremberg. So keep an eye out for it on the <a href="http://coderetreat.org/events/event/search?q=Nuremberg">coderetreat  site</a> or on the <a href="http://www.softwerkskammer.de/">Softwarekammer</a> events page.</div>
]]></content:encoded>
    </item>
    <item>
      <title>Book Review - Exploring Everyday Things with Ruby and R by Sau Sheong Chang</title>
      <link>http://blog.zsoldosp.eu/2012/10/book-review-exploring-everyday-things.html</link>
      <pubDate>Thu, 25 Oct 2012 19:47:00 CEST</pubDate>
      <category><![CDATA[software]]></category>
      <category><![CDATA[data]]></category>
      <category><![CDATA[book review]]></category>
      <category><![CDATA[analysis]]></category>
      <category><![CDATA[simulation]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2012/10/book-review-exploring-everyday-things.html</guid>
      <description>Book Review - Exploring Everyday Things with Ruby and R by Sau Sheong Chang</description>
      <content:encoded><![CDATA[
<div style="text-align: center;"><img alt="Book cover image" src="http://akamaicovers.oreilly.com/images/9781449315153/s.gif" title=""/> </div><br/>Disclaimer: I received a free (electronic) copy of this ebook (<a href="http://shop.oreilly.com/product/0636920022626.do">Exploring Everyday Things with Ruby and R by Sau Sheong Chang</a>) from <a href="http://oreilly.com/">O'Reilly</a> as part of the <a href="http://oreilly.com/bloggers">O'Reilly Blogger Review Program</a>, which also requires me to write a review about it. That aside, I would have purchased this book this year anyway, and would have reviewed it on this blog too.<br/><h2>About me and why I read this book</h2>I have been programming professionally for about 8 years, mainly business applications and reporting, so I already have quite some love for data. While I haven't used math much in my day jobs, I liked (and was good at) it in high school, including taking extra classes - so I have learned basic statistics. Refreshing and advancing my data analytics skills is one of my goals this year, and reading this book was part of that plan - I have heard that R is one of the most powerful languages for statistical analysis currently available.<br/><h2>About the book</h2>The book is written assuming basic understanding of programming and sets two goals: <br/><ul><li>to awaken the curiosity in the reader to go out and explore things and search for explanation, models, and experiments to validate understanding; </li><li>to show you some basic, but practical R and Ruby.</li></ul>While the author intended each chapter to be more or less self sufficient, I have found it to be better read sequentially, especially the simulation chapters.<br/><h3>Ruby</h3>I had no trouble with the code examples, even though I have only programmed about half an hour total in my life in Ruby. Beware that the only knowledge you gain about Ruby is the bare minimum required, so you'll have to put aside your thirst for complete understanding of the language and its ecosystem. If you need to have a proper understanding to work in a language (which I don't think is necessary), you are better off either reading a Ruby book first or using your favorite language to obtain the data - the code is easy to port.<br/><h3>Making me curious</h3>I have had a lot of wow/a-ha moments, both about the topics chosen for discussion as well as the math/algorithmic ideas. You may find that you disagree with some of the conclusion the author draws, and it is emphasized during the introduction that the goal of the book is not to convince you about these conclusions, but to demonstrate the journey from question to conclusion in order to equip you with tools to enable you doing the same. This is mostly achieved. <br/>I award extra bonus points for mentioning the limitations of the used analytical tools - I don't think I would trust any book/article/blog post which presents something without its downsides!<br/>Not all examples are exactly everyday (e.g.: an analysis of going to work by car vs. public transportation would have been more everyday than how to simulate the flocking of birds), but they cover a wide breath of topics. The processing and analysis of the data is always challenging enough, plus your general knowledge is expanded.<br/>One thing I was missing is a description of a really important part - being a layman, how do I go about finding which algorithms to use? While it isn't a book about Research 101, a description of the search process would have been great. You can of course always google, but when entering a new topic I find guided search helpful - which are some of the trick keywords, which sites to prefer/avoid, etc. On the other hand, enough methods are described that just properly learning and understanding them would make me a much better statistician already. Once done with that I could just fall back reading through the R packages and methods, hoping that if I have seen a word before it would emerge from my passive knowledge when I'm faced with a matching problem.<br/><h3>The R language</h3>The book does a solid job to help you get started. It demonstrates enough language features to enable to you experiment with it for work projects (e.g.: use MySql as a datasource, create packages, etc.); points out the R component/library hubs to look for community packages; and recommends further learning resources. <br/>The <a href="https://github.com/sausheong/everyday">code examples</a> are like most programming book snippets - procedural, (mostly) everything is located in a single method/script. Not a tangled-spaghetti mess that makes one despise it in legacy code, only it makes for a lower signal/noise ratio and requires more effort from the reader. Guess its a genre problem, so if you have read other programming books, you shouldn't have any problems with this one. <br/><blockquote>Technical comment: the ebook isn't formatted to play nice with the Kindle DX, and while in print the code block might be only broken between left &amp; right pages, on the kindle it makes for awkward read.</blockquote>The exposed APIs suggest that R is a bit too ceremonial for my taste, but that could be abstracted away for the project that warrants R's use. I have also used a number of visually great .NET UI third party components that were a pain to work with from a programmer's perspective, yet helped us create a great product. Plus things that feel alien first become second nature after enough practice, so it isn't a big deal. I plan to take a look at NumPy as well, and defer the decision whether to dive deeper into R (possibly via using <a href="http://www.dotnetrocks.com/default.aspx?showNum=813">F# 3.0 type providers for R</a>).<br/><h3>Overall</h3>The book hasn't left me in awe, but it didn't feel like a chore to read as some other books. I got the taste of R that I wanted when I picked up my copy to read. On top of that, I have learned about fun things, and it also added books to my reading (wish)list (e.g.: <a href="http://www.amazon.com/The-Grammar-Graphics-Statistics-Computing/dp/0387245448/">The Grammar of Graphics by Leland Wilkinson</a>, <a href="http://www.amazon.com/Armchair-Economist-Economics-Everyday-Life/dp/1451651732/">Armchair Economist by Stephen E. Landsburg</a>, and more). This is no definitive guide on R, but to wet your appetite and get you started, it is a good one I can recommend without reservations.]]></content:encoded>
    </item>
    <item>
      <title>My first Code Retreat - Legacy Code Retreat in Frankfurt on Sep 15, 2012</title>
      <link>http://blog.zsoldosp.eu/2012/09/my-first-code-retreat-legacy-code.html</link>
      <pubDate>Wed, 19 Sep 2012 19:44:00 CEST</pubDate>
      <category><![CDATA[software]]></category>
      <category><![CDATA[code retreat]]></category>
      <category><![CDATA[legacy code]]></category>
      <guid isPermaLink="false">http://blog.zsoldosp.eu/2012/09/my-first-code-retreat-legacy-code.html</guid>
      <description>My first Code Retreat - Legacy Code Retreat in Frankfurt on Sep 15, 2012</description>
      <content:encoded><![CDATA[
<blockquote><p>If you are not familiar with the concept of a  <a href="http://coderetreat.org/">code retreat</a>, listen to this  <a href="http://www.dotnetrocks.com/default.aspx?showNum=728">podcast</a> (or read the  <a href="http://s3.amazonaws.com/dnr/dotnetrocks_0728_corey_haines.pdf">transcript</a>).</p></blockquote><p>While I knew about <a href="http://coderetreat.org/">Code Retreats</a> for a while, this  was the first I actually managed to attend). It was organized by the  <a href="http://www.softwerkskammer.de/">German Software Craftsmanship community</a> group, hosted by <a href="http://namics.com">Namics</a>, and facilitated by <a href="https://twitter.com/NicoleRauch">Nicole Rauch</a> and <a href="https://twitter.com/leiderleider">Andreas Leidig</a>. And it was great, thanks to everyone involved in putting up the event!</p><p>The <a href="http://www.coderetreat-rhein-main.com/learnmore-legacy">format has been described by others</a>, so I won't cover that. I have to say though that I really like the format and I wish I started socializing (in software related matters) first at a  code retreat instead of conferences or usergroups - the format of the  event guarantees one doesn't have to worry about uncomfortable silences to be filled with smalltalk. The day starts with coding, the retrospective is group talk, and with the exception of the lunch, the breaks are only five minutes long, and you are searching for the next programming pair  during that time anyway. Great way to get more comfortable interacting  with strangers about software! (And if you do want to socialize, just come early for breakfast and stay after the event).</p><h2 id="i_wonder_if_being_familiar_with_automated_testing_is_a_pre-requisite">I wonder if being familiar with automated testing is a pre-requisite</h2><p>My assumption is that one could attend a legacy code retreat even if  (s)he has no experience with automated testing, since</p><ul><li>You could learn the basics of testing from the pairs you are working   with</li><li>You can see it applied <em>in the real world</em>. The most common objection   I hear from people recently introduced to automated testing/TDD is that    it might work on greenfield projects, but cannot be applied on their    existing project</li></ul><p>So if you are (or know of someone who is) a person who attended such a  code retreat with no prior testing experience, please let me know - I  would love to know whether the above hypothesis matches your experience! Unfortunately all my pairs had prior experience, so it's still just a hypothesis.</p><h2 id="iteration_impressions_lessons_learned">Iteration impressions, lessons learned</h2><ul><li>Dynamic language IDEs still have a long way to go, so for now I'll    probably stick to Vim for python</li><li>While it's interesting to take a guided tour of a language you don't   know, the focus of the codebase is not on datastructures (only uses   lists/arrays) and thus you only catch a glimpse of the language. I'll   have to attend a normal code retreat to see whether this would be    different there</li><li>Giving a language demo is interesting, and you learn a lot about the   language too. People new to a language tend to ask questions about    things you take for granted, yet you may not know the answer to</li><li>Taking baby steps and not assuming anything is a Good Thing ™ - the   codebase is devious one, crafted with care to make you trip over. I.e.:   it is a proper legacy codebase, despite its small size!</li><li>The "never assume" advice holds especially as you move between    iterations. During one iteration we made a mistake that wasn't caught by    the regression tests. Since in the previous iteration (with another    pair) we had 100% (line) coverage, the fact that in the next    iteration we might not have that didn't occur to me...</li><li>Discipline is hard. I was totally carried away refactoring during the   last iteration. I had this craving to actually make progress with the   refactoring, and I caught myself saying things "were we responsible   coders, we would now stop to write some tests, but let's just move on   now", as well as tugging multiple pieces of the spaghetti at the same   time. While here I might be forgiven (after all, the last iteration    was a free to choose what to do (with) this codebase), it's an   important reminder that I should watch myself at work - I would have   never expected myself to get so off track in a matter of 10-15 minutes.   And I used to pride myself that I realize when I'm in a dead end and   have no trouble throwing away code to start from the last known good   state!</li><li>The code retreat format is great for teaching people the importance of   prototypes, I will keep that in mind for the future. During the    functional iteration we haven't made much progress, but on the train    home I did a quick experiment to start making it functional from the   outside in, starting at the main() method, introducing the GameState   as a subclass of Game, and each step returning a new GameState (while   still modifying the old game state, since the refactoring was    incomplete, as it usually is the case). This approach didn't occur to    me the first time, and had I not started from a clean slate, I would   not have thought of it if I were to continue where I left off the    previous attempt.</li><li>While the facilitators keep going around, we didn't always get deep    into the issues they commented on (e.g.: I think if the test case and    the test name express clearly the domain and the scenario, it is   totally fine to use a variable called <em>sut</em>, etc.). </li><li>However, there is a lot of time available to discuss with your pair,   not having to worry whether or not the code will be finished, which    is great. One caveat is that you do have a time limit on the    discussion, since you don't want to bore your pair and want to    actually write code, so you are forced to condense your thoughts.    Luckily, this limit is not as bad as <a href="https://twitter.com">twitter</a>'s</li><li>Theory vs. practice, a.k.a. talking the talk vs. walking the walk.    I've been guilty of this myself, describing how my ideal test case    would look like in theory, and what guiding principles I follow while   writing an actual test case. Then the pair politely points out that the    theory is great, but what we have here in the code is not a    manifestation of those principles...</li></ul><h2 id="the_iteration_i_wish_was_there_-_working_towards_a_change_request">The Iteration I wish was there - working towards a change request</h2><p>Each iteration had a different focus, and I assume that there isn't a static final (pun intended) list of possible restrictions and it evolves. So despite this being my first ever code retreat and being told that  these ideas wouldn't fit the format, I'm documenting them here, so that I can refer back to it after my next code retreats to see whether I still feel the same about these, since now I think they would be similar  restrictions like during the traditional code retreat when one is not  allowed to speak or use <em>if</em> statements in the code.</p><p>I really missed having a clear functional goal for the iterations, since one usually refactors legacy code when some new feature/enhancement is  needed - and it has a huge impact on how one approaches a refactoring.</p><p>One mistake I have (seen) made when working with legacy code is going on  a <strong>refactoring spree</strong>, touching parts of the codebase which  we don't  need to change. The danger of it is that we can easily code ourselves  into a corner for days and slip on the original delivery. If it ain't  broken, don't fix it (and this doesn't contradict the  <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">boyscout rule</a>). This issue has been exposed during the iterations, many of us refactored one part of the application that  wasn't business logic heavy, but was a low hanging fruit. While one  iteration wouldn't be enough time to finish testing that part, the  conversation around it (what test cases would be needed to provide  sufficient code coverage, what's the minimum refactoring we need to do  to achieve that, etc.).</p><p>I raised it during the final retrospective, and people agree it's an important aspect, but they suggested it's not fit for the format of the code retreat.</p><p>The other great benefit of having a clear goal is that they demonstrate how <strong>fragile</strong> the <strong>regression characterization tests</strong> can be. A  neat little change request to the core business logic would have left  us without the safety net again, and would have made us think back to  the previous iterations when we felt skipping writing a specific test  is safe. While everyone knows it, that doesn't mean we wouldn't fall  victim to it..</p><p>And if you prefer to see a concrete example, instead of just reading  through this abstract text, I have something like the <a href="http://anarchycreek.com/doubledawgdare-series/">Double Dawg  Dare</a> in mind.</p><h2 id="some_technical_notes_for_attending_a_code_retreat">Some technical notes for attending a code retreat:</h2><ul><li>doublecheck with the organizers what you'll need to attend. They    probably plan to send out a reminder/notification email before the   event, but I so rarely use my laptop in an online environment that   their notice was too late for me to actually prepare my laptop for   the event.</li><li>know your settings &amp; IDE. There are a ton of yaks to be shaved, and   many minutes have been wasted by setting things up. It doesn't take   away from the experience, but it did stress me a bit the first time</li><li><p>either know how to use git, or just create two copies of the codebase   so you can easily revert to a clean codebase after the sessions. We    had some problems with this.</p><p>git clean -x -f -n # remove -n to really remove them   git reset HEAD . # remove everything from the changelist in case you added it   git checkout -- . # revert everything below the </p></li><li><p>bring a USB stick, and if you are not using your own laptop during all    the sessions, make a copy of the golden master textfile onto it after    each of your sessions in a new programming language (my laptop was    only used during the first and the last iteration, so for the last we   had no sample output textfile we could work against, and it took some   time to obtain it.</p></li><li>bring your own keyboard and know how to change a mac/linux/windows    machine's keyboard layout (or install one). I have not been typing in    a number of sessions because of this (try typing on a German mac    keyboard, when you are used to windows US layout!)</li></ul><h2 id="in_summary">In Summary</h2><p>It's a great event, you meet great people, and I would be surprised if  you came away from a code retreat not having learnt anything new.</p>
<hr><ol>
<li id="1">
    <strong><a href="http://www.blogger.com/profile/06671468907643091304">Adrian Bolboaca</strong></a> on <em>2012/09/21 10:44:14</em>: Thanks for the great write-up.<br/><br/>I have a kind of an answer for why I don't get to that session of change request. When I thought about the legacy code retreat and added a couple of sessions I wanted to have a more natural flow. I wanted to have this session also, sometimes in the end of the day. But as a facilitator I saw that the attendees do not really know the techniques so we are stuck into explaining the basics that they need in order to be able to handle a change request. During all the legacy code retreats I facilitated maybe the 7th iteration would have been the "change request constraint". <br/>I e-met Andreas and Nicole a couple early this year when we had a skype call about the legacy code retreat. Then I met them at the Socrates conference this year. I'm sure they are doing an excellent job as facilitators, and maybe they have some answers to this. My guess is that we need more legacy code retreats happening and only after a while when the attendees know better the basics we can start and introduce this session. Or maybe we can find together a solution on improving the current format.
<ol>
<li id="1-1">
    <strong><a href="http://pboop.wordpress.com/">pboop</strong></a> on <em>2012/09/23 16:44:45</em>: I agree with you. In my opinion a leagcy code retreat is about HOW to change the code not WHY or WHICH WAY in order to open room for a new requirement.<br/><br/>Every participant is free to let her/his imagination grow after (or even during) the retreat and play around with the code base, inventing new requirements and so on.
</li><li id="1-2">
    <strong><a href="/">Peter Zsoldos</strong></a> on <em>2012/09/30 17:11:58</em>: Thanks for the comment and sorry for the late followup.<br/><br/>I didn't intend that section as a criticism for the facilitators. Since it can be misread, I would appreciate if you could point out where and how, so I can correct it to avoid anyone else misunderstanding my intent (re-reading my post didn't help, I'm afraid I have too much context about what I wanted to say).
</li><li id="1-3">
    <strong><a href="/">Peter Zsoldos</strong></a> on <em>2012/09/30 17:12:58</em>: I don't know what the exact goal was behind creating the legacy coderetreat format. But I have always preferred learning not just a practice, but also its underpinning ideas and the limits of it. While I can practice refactoring on my own, there may not be someone around pointing out that not everything needs to be refactored. Both are important and have their places, and we seem to disagree about the latter. My thinking is influenced by seeing people (myself included) overdoing/overvaluing the latest pattern/practice they have came across (HelloWorldProxyFactoryImpl), without knowing the limits of their usefulness and knowing the difference between understanding something in theory versus doing that in practice - being told something is brittle/unreliable and understanding it on an intellectual level is very different from actually experiencing it. The latter tends to be easier to remember :)<br/><br/>But I might have fallen victim to offering a solution instead of raising a question. If the Nuremberg global code retreat will be a success, and there will be more following it, I'll be happy to immerse myself deeper into the code retreat community and see how I feel about this original idea after some time - one of the motivations for posting it was so that I can come back and revisit it later.
</li></ol></li></ol>
]]></content:encoded>
    </item>
  </channel>
</rss>
