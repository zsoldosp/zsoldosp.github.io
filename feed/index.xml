<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Do. Reflect. Learn. Repeat!</title>
    <link>http://zsoldosp.eu</link>
    <description>Excercises in public learning</description>
    <pubDate>Sat, 13 Jul 2013 15:33:37 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Opening the 2013 paddling season on the Kocher</title>
      <link>http://zsoldosp.eu/2013/03/10/opening-the-2013-paddling-season-on-the-kocher/</link>
      <pubDate>Sun, 10 Mar 2013 17:08:36 CET</pubDate>
      <category><![CDATA[outdoors]]></category>
      <category><![CDATA[canoe]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2013/03/10/opening-the-2013-paddling-season-on-the-kocher/</guid>
      <description>Opening the 2013 paddling season on the Kocher</description>
      <content:encoded><![CDATA[
I've just posted a brief description of our first trip of the season over at the <a href="http://www.songofthepaddle.co.uk/forum/showthread.php?40272-Opening-the-2013-season-on-the-Kocher-Braunsbach-to-K%FCnzelsau&amp;p=465323">Song of the Paddle</a> forum, check it out!]]></content:encoded>
    </item>
    <item>
      <title>Continuous Team Switching?</title>
      <link>http://zsoldosp.eu/2013/01/continuous-team-switching.html</link>
      <pubDate>Sat, 19 Jan 2013 13:35:00 CET</pubDate>
      <category><![CDATA[culture]]></category>
      <category><![CDATA[programming]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2013/01/continuous-team-switching.html</guid>
      <description>Continuous Team Switching?</description>
      <content:encoded><![CDATA[
<a href="http://douglassquirrel.com/">Douglas Squirrel</a> led <a href="http://www.citconf.com/wiki/index.php?title=Continuous_rewriting">a session at CITCON Budapest 2012 about Continuous Rewriting</a>, summarizing many ideas I've heard before from <a href="http://vimeo.com/43659070">Dan North</a> or <a href="http://forwardtechnology.co.uk/videos/32447325">Fred George</a> presentations into a really coherent evolutionary progression,  and took the concept even further. <br/><br/>Like other <em>Continuous</em> practices, this would be as much a  technical as an organizational-cultural change. It got me thinking about how this would change the team dynamics - not just inside a team, but in the context of the bigger organization.<br/><br/>The various <em>Continuous</em> practices always came about the realization that when something is rarely done, people will be bad at it and thus  it will be hard, ineffective and error prone. Thus if we simply do it  more often, we would get better at it.<br/><br/>Joining a new team and becoming an effective contributor is a process that is in need of improvement (on most teams). Getting to grips with the inherent domain complexity and the piled on technical complexity, learning the tricks and workarounds, etc. can hold back someone from being efficient for quite a while. On the other hand, having a fresh set of eyes can provide  a new perspective and expose much of the technical debt the team has.<br/><br/>All the continuous rewrite examples so far have reduced the code size, making it understandable (though often this reduction came thanks to better understanding of the domain).<br/><br/>Assuming the reduced code size enables speedier onboarding of new team members,  while still benefiting from the new perspective it brings, what would  more frequently rotating in and out rotation team members (while never completely  replacing any one team) result in?<br/><ul><li>Could this make spreading of ideas and practices within a company    more effective and faster than the current silo'd, departmental setups?</li><li>Would it speed up the on the job, just in time learning of every<br/>  developer in the company?</li><li>Would it improve the skill level of every developer, or would it   drag everyone down?</li><li>Would it strengthen the company culture, simply since each person    would know more other employees (given that many of us only socialize    within our own team)? </li><li>Would it spark more cross-departmental improvements - unlike    accountants or marketers, developers can jump between various areas    and domains of the company with relative ease, and thus could see    potential improvements. Would this make crazy IT processes (where the data   passes through, without enhancement, several different teams and applications,   modified effectively by only one at the middle, then be loaded back into    the original source) extinct, making IT governance easier?</li></ul>I don't know. But it certainly was a fun thought experiment! Feel free to add questions to the above list in the comments!
<hr><ol>
<li id="1">
    <strong><a href="http://www.odd-e.com">Steven</strong></a> on <em>2013/01/19 15:42:41</em>: There are studies found that stable teams can improve as long as 3 years. From that I would recommend stable teams over switching team members in and out.
<ol>
<li id="1-1">
    <strong><a href="/">Peter Zsoldos</strong></a> on <em>2013/01/19 17:08:12</em>: Steve,<br/><br/>thanks for the input! Could you give some pointers for these studies (titles or links)?<br/><br/>I don't understand your second sentence (not a native English speaker) - you suggest that based on these studies, having a stable team is better/more effective/etc. than having constantly changing team members (the thought experiment of this post)?
</li></ol></li><li id="2">
    <strong><a href="http://tamasrev.wordpress.com/">tamasrev</strong></a> on <em>2013/01/21 21:22:23</em>: Wow, this makes sense.<br/><br/>Let me add some anecdotal evidence: Every time I'm joining a team, I start to see tons of technical debt. Later I'm getting used to it. Sometimes I even miss the old code when switching to something new. This is the thing that makes _some_ outsourcing veterans (i.e. EPAM alumni) very efficient.
</li><li id="3">
    <strong><a href="/">Peter Zsoldos</strong></a> on <em>2013/01/23 20:38:18</em>: what is the thing that makes outsourcing veterans efficient? The ability to enter any codebase and identify the place(s) that need changing for the new feature/project? <br/><br/>To add to the anecdotes (hoping @jasongorman doesn't read comments :)) - you don't need outsourcing for that, enough if you work on maintenance teams that are responsible for more than one application. Though it might be more a question of attitude and/or confidence than experience with switches. E.g.: I never hesitate to follow a stacktrace into 3rd party code (or find out why I *don't* have a stacktrace) or simply load the source to compensate the unhelpful documentation. Kind of like the difference between junior and senior developers is that the latter are not afraid to voice their opinions/questions...
</li><li id="4">
    <strong><a href="http://tamasrev.wordpress.com/">tamasrev</strong></a> on <em>2013/01/29 19:37:44</em>: Didn't the blog just swallowed my comment? Here it is again:<br/><br/>What makes outsourcing veterans very efficient that they have to work with and maintain several projects written by other people. They will learn both continuously improve the code as well as do fuckin quick fixes. They also learn how to adapt to different coding styles they see in their project pool. They can relatively quickly identify the problematic parts of a codebase and they can come up with change suggestions. However, a typical outsourcing consumer isn't interested in their opinion.<br/><br/>It's worth to mention that outsourcing veterans only have a *chance* to learn all this stuff. They can also burn out due to the mind-numbing tasks they have to do.
</li></ol>
]]></content:encoded>
    </item>
    <item>
      <title>Global Day of Coderetreat 2012 - Nuremberg</title>
      <link>http://zsoldosp.eu/2012/12/global-day-of-coderetreat-2012-nuremberg.html</link>
      <pubDate>Thu, 20 Dec 2012 09:30:00 CET</pubDate>
      <category><![CDATA[code]]></category>
      <category><![CDATA[organizing]]></category>
      <category><![CDATA[community]]></category>
      <category><![CDATA[code retreat]]></category>
      <category><![CDATA[software]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2012/12/global-day-of-coderetreat-2012-nuremberg.html</guid>
      <description>Global Day of Coderetreat 2012 - Nuremberg</description>
      <content:encoded><![CDATA[
<br/><br/><header> <div id="global-day-of-coderetreat-2012-nuremberg"></div></header><div class="post_prose"><blockquote>If you are not familiar with the concept of a  <a href="http://coderetreat.org/">code retreat</a>, listen to this  <a href="http://www.dotnetrocks.com/default.aspx?showNum=728">podcast</a> (or read the  <a href="http://s3.amazonaws.com/dnr/dotnetrocks_0728_corey_haines.pdf">transcript</a>).</blockquote>As you may remember, I've attended <a href="/2012/09/my-first-code-retreat-legacy-code.html">my first code retreat earlier this year in Frankfurt</a>. One of the reasons for attending was  that I had a nagging thought throughout organizing <a href="http://citconf.com/budapest2012/">CITCON Budapest</a> that I should do something locally too, and a coderetreat sounded just like the perfect thing. So I've came back with enough enthusiasm from Frankfurt to approach our CEO (Dirk) about <a href="http://www.paessler.com/">Paessler AG</a> helping me organize one in Nuremberg - and he offered the office to host it in and to pay for the lunch. Thus  the biggest obstacle was cleared.<br/><blockquote>The importance of this couldn't be emphasized. As I've seen on the <a href="http://globalday.coderetreat.org/">Global Day of Coderetreat</a> organizers' list, it has caused some headache and  worry for fellow hosts. And in addition to the fiscal support, my  colleagues went way beyond anything I expected - our sysadmins arranging the required technical &amp; security infrastructure, running <a href="http://www.paessler.com/blog/2012/11/21/other/paessler-is-one-of-the-hosts-of-the-global-day-of-coderetreat">the GDCR event on the  company blog</a>, and even non-programmer colleagues offering to  come by Saturday to help with anything if needed.  Thank you all, you made it really easy! (by the way, <a href="http://www.paessler.com/company/jobs">Paessler is hiring!</a>)</blockquote>Anyhow, this post will not be about the organization process, but about what I have learned on this day as a co-facilitator &amp; participant about code and people.<br/><blockquote>Another big thanks goes to <a href="http://twitter.com/marcoemrich">Marco Emrich</a>, a seasoned coderetreat facilitator, who helped getting the event off the ground and helped me getting  started facilitating (thanks to <a href="https://twitter.com/NicoleRauch">Nicole</a> &amp; <a href="http://twitter.com/Ookami86">Johannes</a>  for introducing me to Marco!)</blockquote>The attendance was low (next time we'll schedule the start 30-60 minutes later), but I was surprised to learn how well the coderetreat functioned with so few participants. To ensure there is enough variety and that people have new pairs, we took turns with Marco coding (which we planned anyway in case of odd number of participants).<br/><h2 id="the-sessions">The Sessions</h2><ol><li>no constraints, getting familiar with the problem</li><li><a href="https://github.com/zsoldosp/zsoldosp-dotfiles/blob/master/bin/snippets/python/unitsofmeasure.py">no primitives</a> &amp; focus on the rules (fake out the world if needed at all)</li><li>Ping-Pong TDD &amp; naive implementation (with a switch at half time)</li><li>no conditional &amp; no mouse</li><li>baby steps</li><li>free to choose session</li></ol><h2 id="its-the-global-day-of-coderetreat">It's the <strong>Global</strong> Day of Coderetreat</h2>Even though we were only a few people here, it's been great to chat to the others elsewhere worldwide, saying hi to people doing exactly the same thing we do, just in various other  locations. While there were audio problems sometime, we didn't mind it. And next year we won't  bother with trying to schedule exact times for the calls, since we all will miss those times  anyway, but rather just rely on improvising video calls.<br/><h2 id="code-related-observations">Code Related Observations</h2><ul><li>It's really interesting to see other people programming. It is certainly not    something one gets to do during their day jobs (except maybe trainers, team leads, and mentors).   It is even more interesting to contrast the external observer's impressions/understanding   with the understanding of the people involved in the programming - the difference can be   huge. This might help understanding how many developers feel bosses/managers always misunderstand   their progress...</li><li>It's also interesting to track people across the different pairs and see whether    they bring their firm opinions (battle scars?) to each session or let go of them    to allow the opportunity to learn a different approach. This is not necessarily a bad    thing, but if you have plans to learn, beware of this and be explicit what you want to    learn - know whether you want to explore one idea and bounce it off/get it challenged by    many people or whether you want to simply see how others program and see if any of that    could be applicable to you. E.g.: it was pretty interesting to see how my F#/Scala inspired   ideas (case classes &amp; types) could be materialized in clojure. However, I have certainly   learned less about clojure than I would have had I let my partner do it as he would   in clojure natively (though the <em>no primitives</em> restriction was screaming   for types in my opinion).</li><li>We developers are really creative at finding (or at least looking for) loopholes in the   constraints. During the <em>no conditional</em> session one pair TDD'd a function returning a boolean   and claimed they had no conditionals in their code and were trying to convince us that   even the rest of the system wouldn't need conditionals to use this code... Or that returning   booleans is not an issue since they could refactor it into something that doesn't need to    return booleans once they get to the rest of the system... I'm certainly looking forward running    a <em>no return values allowed</em> session and see how people will circumvent that (and rationalize it   away)!</li><li>The longer you have worked with a tool/language, the more readily you accept and work around   its quirks. When we wanted to structure our tests the way we would describe <a href="https://en.wikipedia.org/wiki/Conway's_Game_of_Life">the four rules   of Conway's Game of Life</a> in writing (heading, then four subheadings, and then the concrete    examples under the subheadings) it didn't match RSpec's expectations at all. We agreed that both    structures (RSpec vs. the natural) make sense and we can understand how &amp; why RSpec evolved this way,   but we couldn't make it match the natural structure. This lead to a nice brief discussion about when    you want to deviate from standard tooling/processes and when one is better off following it.</li><li>Some people just can't put off the desire to finish the task. I will have to be conscious of this   in the future, and prod people more - e.g.: to ask whether this test &amp; app code meets their definition of   perfect.</li><li>Sometimes when things are hard, it is an indication that you are doing the wrong thing or solving the   wrong problem. E.g.: I wanted to write a test for our function to ensure that the function fails unless    it gets exactly 8 parameters (number of neighbors) but we were not supposed to use primitives. It felt   like enlightenment when my pair pointed out that there is nothing in the rules that mandate that requirement!</li><li><a href="http://www.infoq.com/presentations/TDD-as-if-You-Meant-It">TDD as if you meant it</a> is really hard unless both of you are good at the chosen   language. I assumed Ruby and Python are rather similar, but learned quickly it is not the    case. While we had great conversations during the session, and I've learned some interesting things about   Ruby, we have not made much progress with the actual constraint.</li><li>It seems most people work on their desktop machines/docking stations, and thus their laptop is   a secondary device, where they have not invested in their environments that much, and thus   the no mouse constraint is much harder (e.g.: having ReSharper installed at work, but not on   the personal laptop).</li></ul>... and I could go on much longer :) Certainly, the coderetreat format is great, and I enjoyed both programming and facilitating (though the fact my German is not strong enough makes it somewhat difficult),  and I'm sure we'll do more coderetreats in Nuremberg. So keep an eye out for it on the <a href="http://coderetreat.org/events/event/search?q=Nuremberg">coderetreat  site</a> or on the <a href="http://www.softwerkskammer.de/">Softwarekammer</a> events page.</div>
]]></content:encoded>
    </item>
    <item>
      <title>Book Review - Exploring Everyday Things with Ruby and R by Sau Sheong Chang</title>
      <link>http://zsoldosp.eu/2012/10/book-review-exploring-everyday-things.html</link>
      <pubDate>Thu, 25 Oct 2012 19:47:00 CEST</pubDate>
      <category><![CDATA[software]]></category>
      <category><![CDATA[data]]></category>
      <category><![CDATA[book review]]></category>
      <category><![CDATA[analysis]]></category>
      <category><![CDATA[simulation]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2012/10/book-review-exploring-everyday-things.html</guid>
      <description>Book Review - Exploring Everyday Things with Ruby and R by Sau Sheong Chang</description>
      <content:encoded><![CDATA[
<div style="text-align: center;"><img alt="Book cover image" src="http://akamaicovers.oreilly.com/images/9781449315153/s.gif" title=""/> </div><br/>Disclaimer: I received a free (electronic) copy of this ebook (<a href="http://shop.oreilly.com/product/0636920022626.do">Exploring Everyday Things with Ruby and R by Sau Sheong Chang</a>) from <a href="http://oreilly.com/">O'Reilly</a> as part of the <a href="http://oreilly.com/bloggers">O'Reilly Blogger Review Program</a>, which also requires me to write a review about it. That aside, I would have purchased this book this year anyway, and would have reviewed it on this blog too.<br/><h2>About me and why I read this book</h2>I have been programming professionally for about 8 years, mainly business applications and reporting, so I already have quite some love for data. While I haven't used math much in my day jobs, I liked (and was good at) it in high school, including taking extra classes - so I have learned basic statistics. Refreshing and advancing my data analytics skills is one of my goals this year, and reading this book was part of that plan - I have heard that R is one of the most powerful languages for statistical analysis currently available.<br/><h2>About the book</h2>The book is written assuming basic understanding of programming and sets two goals: <br/><ul><li>to awaken the curiosity in the reader to go out and explore things and search for explanation, models, and experiments to validate understanding; </li><li>to show you some basic, but practical R and Ruby.</li></ul>While the author intended each chapter to be more or less self sufficient, I have found it to be better read sequentially, especially the simulation chapters.<br/><h3>Ruby</h3>I had no trouble with the code examples, even though I have only programmed about half an hour total in my life in Ruby. Beware that the only knowledge you gain about Ruby is the bare minimum required, so you'll have to put aside your thirst for complete understanding of the language and its ecosystem. If you need to have a proper understanding to work in a language (which I don't think is necessary), you are better off either reading a Ruby book first or using your favorite language to obtain the data - the code is easy to port.<br/><h3>Making me curious</h3>I have had a lot of wow/a-ha moments, both about the topics chosen for discussion as well as the math/algorithmic ideas. You may find that you disagree with some of the conclusion the author draws, and it is emphasized during the introduction that the goal of the book is not to convince you about these conclusions, but to demonstrate the journey from question to conclusion in order to equip you with tools to enable you doing the same. This is mostly achieved. <br/>I award extra bonus points for mentioning the limitations of the used analytical tools - I don't think I would trust any book/article/blog post which presents something without its downsides!<br/>Not all examples are exactly everyday (e.g.: an analysis of going to work by car vs. public transportation would have been more everyday than how to simulate the flocking of birds), but they cover a wide breath of topics. The processing and analysis of the data is always challenging enough, plus your general knowledge is expanded.<br/>One thing I was missing is a description of a really important part - being a layman, how do I go about finding which algorithms to use? While it isn't a book about Research 101, a description of the search process would have been great. You can of course always google, but when entering a new topic I find guided search helpful - which are some of the trick keywords, which sites to prefer/avoid, etc. On the other hand, enough methods are described that just properly learning and understanding them would make me a much better statistician already. Once done with that I could just fall back reading through the R packages and methods, hoping that if I have seen a word before it would emerge from my passive knowledge when I'm faced with a matching problem.<br/><h3>The R language</h3>The book does a solid job to help you get started. It demonstrates enough language features to enable to you experiment with it for work projects (e.g.: use MySql as a datasource, create packages, etc.); points out the R component/library hubs to look for community packages; and recommends further learning resources. <br/>The <a href="https://github.com/sausheong/everyday">code examples</a> are like most programming book snippets - procedural, (mostly) everything is located in a single method/script. Not a tangled-spaghetti mess that makes one despise it in legacy code, only it makes for a lower signal/noise ratio and requires more effort from the reader. Guess its a genre problem, so if you have read other programming books, you shouldn't have any problems with this one. <br/><blockquote>Technical comment: the ebook isn't formatted to play nice with the Kindle DX, and while in print the code block might be only broken between left &amp; right pages, on the kindle it makes for awkward read.</blockquote>The exposed APIs suggest that R is a bit too ceremonial for my taste, but that could be abstracted away for the project that warrants R's use. I have also used a number of visually great .NET UI third party components that were a pain to work with from a programmer's perspective, yet helped us create a great product. Plus things that feel alien first become second nature after enough practice, so it isn't a big deal. I plan to take a look at NumPy as well, and defer the decision whether to dive deeper into R (possibly via using <a href="http://www.dotnetrocks.com/default.aspx?showNum=813">F# 3.0 type providers for R</a>).<br/><h3>Overall</h3>The book hasn't left me in awe, but it didn't feel like a chore to read as some other books. I got the taste of R that I wanted when I picked up my copy to read. On top of that, I have learned about fun things, and it also added books to my reading (wish)list (e.g.: <a href="http://www.amazon.com/The-Grammar-Graphics-Statistics-Computing/dp/0387245448/">The Grammar of Graphics by Leland Wilkinson</a>, <a href="http://www.amazon.com/Armchair-Economist-Economics-Everyday-Life/dp/1451651732/">Armchair Economist by Stephen E. Landsburg</a>, and more). This is no definitive guide on R, but to wet your appetite and get you started, it is a good one I can recommend without reservations.]]></content:encoded>
    </item>
    <item>
      <title>My first Code Retreat - Legacy Code Retreat in Frankfurt on Sep 15, 2012</title>
      <link>http://zsoldosp.eu/2012/09/my-first-code-retreat-legacy-code.html</link>
      <pubDate>Wed, 19 Sep 2012 19:44:00 CEST</pubDate>
      <category><![CDATA[software]]></category>
      <category><![CDATA[code retreat]]></category>
      <category><![CDATA[legacy code]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2012/09/my-first-code-retreat-legacy-code.html</guid>
      <description>My first Code Retreat - Legacy Code Retreat in Frankfurt on Sep 15, 2012</description>
      <content:encoded><![CDATA[
<blockquote><p>If you are not familiar with the concept of a  <a href="http://coderetreat.org/">code retreat</a>, listen to this  <a href="http://www.dotnetrocks.com/default.aspx?showNum=728">podcast</a> (or read the  <a href="http://s3.amazonaws.com/dnr/dotnetrocks_0728_corey_haines.pdf">transcript</a>).</p></blockquote><p>While I knew about <a href="http://coderetreat.org/">Code Retreats</a> for a while, this  was the first I actually managed to attend). It was organized by the  <a href="http://www.softwerkskammer.de/">German Software Craftsmanship community</a> group, hosted by <a href="http://namics.com">Namics</a>, and facilitated by <a href="https://twitter.com/NicoleRauch">Nicole Rauch</a> and <a href="https://twitter.com/leiderleider">Andreas Leidig</a>. And it was great, thanks to everyone involved in putting up the event!</p><p>The <a href="http://www.coderetreat-rhein-main.com/learnmore-legacy">format has been described by others</a>, so I won't cover that. I have to say though that I really like the format and I wish I started socializing (in software related matters) first at a  code retreat instead of conferences or usergroups - the format of the  event guarantees one doesn't have to worry about uncomfortable silences to be filled with smalltalk. The day starts with coding, the retrospective is group talk, and with the exception of the lunch, the breaks are only five minutes long, and you are searching for the next programming pair  during that time anyway. Great way to get more comfortable interacting  with strangers about software! (And if you do want to socialize, just come early for breakfast and stay after the event).</p><h2 id="i_wonder_if_being_familiar_with_automated_testing_is_a_pre-requisite">I wonder if being familiar with automated testing is a pre-requisite</h2><p>My assumption is that one could attend a legacy code retreat even if  (s)he has no experience with automated testing, since</p><ul><li>You could learn the basics of testing from the pairs you are working   with</li><li>You can see it applied <em>in the real world</em>. The most common objection   I hear from people recently introduced to automated testing/TDD is that    it might work on greenfield projects, but cannot be applied on their    existing project</li></ul><p>So if you are (or know of someone who is) a person who attended such a  code retreat with no prior testing experience, please let me know - I  would love to know whether the above hypothesis matches your experience! Unfortunately all my pairs had prior experience, so it's still just a hypothesis.</p><h2 id="iteration_impressions_lessons_learned">Iteration impressions, lessons learned</h2><ul><li>Dynamic language IDEs still have a long way to go, so for now I'll    probably stick to Vim for python</li><li>While it's interesting to take a guided tour of a language you don't   know, the focus of the codebase is not on datastructures (only uses   lists/arrays) and thus you only catch a glimpse of the language. I'll   have to attend a normal code retreat to see whether this would be    different there</li><li>Giving a language demo is interesting, and you learn a lot about the   language too. People new to a language tend to ask questions about    things you take for granted, yet you may not know the answer to</li><li>Taking baby steps and not assuming anything is a Good Thing ™ - the   codebase is devious one, crafted with care to make you trip over. I.e.:   it is a proper legacy codebase, despite its small size!</li><li>The "never assume" advice holds especially as you move between    iterations. During one iteration we made a mistake that wasn't caught by    the regression tests. Since in the previous iteration (with another    pair) we had 100% (line) coverage, the fact that in the next    iteration we might not have that didn't occur to me...</li><li>Discipline is hard. I was totally carried away refactoring during the   last iteration. I had this craving to actually make progress with the   refactoring, and I caught myself saying things "were we responsible   coders, we would now stop to write some tests, but let's just move on   now", as well as tugging multiple pieces of the spaghetti at the same   time. While here I might be forgiven (after all, the last iteration    was a free to choose what to do (with) this codebase), it's an   important reminder that I should watch myself at work - I would have   never expected myself to get so off track in a matter of 10-15 minutes.   And I used to pride myself that I realize when I'm in a dead end and   have no trouble throwing away code to start from the last known good   state!</li><li>The code retreat format is great for teaching people the importance of   prototypes, I will keep that in mind for the future. During the    functional iteration we haven't made much progress, but on the train    home I did a quick experiment to start making it functional from the   outside in, starting at the main() method, introducing the GameState   as a subclass of Game, and each step returning a new GameState (while   still modifying the old game state, since the refactoring was    incomplete, as it usually is the case). This approach didn't occur to    me the first time, and had I not started from a clean slate, I would   not have thought of it if I were to continue where I left off the    previous attempt.</li><li>While the facilitators keep going around, we didn't always get deep    into the issues they commented on (e.g.: I think if the test case and    the test name express clearly the domain and the scenario, it is   totally fine to use a variable called <em>sut</em>, etc.). </li><li>However, there is a lot of time available to discuss with your pair,   not having to worry whether or not the code will be finished, which    is great. One caveat is that you do have a time limit on the    discussion, since you don't want to bore your pair and want to    actually write code, so you are forced to condense your thoughts.    Luckily, this limit is not as bad as <a href="https://twitter.com">twitter</a>'s</li><li>Theory vs. practice, a.k.a. talking the talk vs. walking the walk.    I've been guilty of this myself, describing how my ideal test case    would look like in theory, and what guiding principles I follow while   writing an actual test case. Then the pair politely points out that the    theory is great, but what we have here in the code is not a    manifestation of those principles...</li></ul><h2 id="the_iteration_i_wish_was_there_-_working_towards_a_change_request">The Iteration I wish was there - working towards a change request</h2><p>Each iteration had a different focus, and I assume that there isn't a static final (pun intended) list of possible restrictions and it evolves. So despite this being my first ever code retreat and being told that  these ideas wouldn't fit the format, I'm documenting them here, so that I can refer back to it after my next code retreats to see whether I still feel the same about these, since now I think they would be similar  restrictions like during the traditional code retreat when one is not  allowed to speak or use <em>if</em> statements in the code.</p><p>I really missed having a clear functional goal for the iterations, since one usually refactors legacy code when some new feature/enhancement is  needed - and it has a huge impact on how one approaches a refactoring.</p><p>One mistake I have (seen) made when working with legacy code is going on  a <strong>refactoring spree</strong>, touching parts of the codebase which  we don't  need to change. The danger of it is that we can easily code ourselves  into a corner for days and slip on the original delivery. If it ain't  broken, don't fix it (and this doesn't contradict the  <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">boyscout rule</a>). This issue has been exposed during the iterations, many of us refactored one part of the application that  wasn't business logic heavy, but was a low hanging fruit. While one  iteration wouldn't be enough time to finish testing that part, the  conversation around it (what test cases would be needed to provide  sufficient code coverage, what's the minimum refactoring we need to do  to achieve that, etc.).</p><p>I raised it during the final retrospective, and people agree it's an important aspect, but they suggested it's not fit for the format of the code retreat.</p><p>The other great benefit of having a clear goal is that they demonstrate how <strong>fragile</strong> the <strong>regression characterization tests</strong> can be. A  neat little change request to the core business logic would have left  us without the safety net again, and would have made us think back to  the previous iterations when we felt skipping writing a specific test  is safe. While everyone knows it, that doesn't mean we wouldn't fall  victim to it..</p><p>And if you prefer to see a concrete example, instead of just reading  through this abstract text, I have something like the <a href="http://anarchycreek.com/doubledawgdare-series/">Double Dawg  Dare</a> in mind.</p><h2 id="some_technical_notes_for_attending_a_code_retreat">Some technical notes for attending a code retreat:</h2><ul><li>doublecheck with the organizers what you'll need to attend. They    probably plan to send out a reminder/notification email before the   event, but I so rarely use my laptop in an online environment that   their notice was too late for me to actually prepare my laptop for   the event.</li><li>know your settings &amp; IDE. There are a ton of yaks to be shaved, and   many minutes have been wasted by setting things up. It doesn't take   away from the experience, but it did stress me a bit the first time</li><li><p>either know how to use git, or just create two copies of the codebase   so you can easily revert to a clean codebase after the sessions. We    had some problems with this.</p><p>git clean -x -f -n # remove -n to really remove them   git reset HEAD . # remove everything from the changelist in case you added it   git checkout -- . # revert everything below the </p></li><li><p>bring a USB stick, and if you are not using your own laptop during all    the sessions, make a copy of the golden master textfile onto it after    each of your sessions in a new programming language (my laptop was    only used during the first and the last iteration, so for the last we   had no sample output textfile we could work against, and it took some   time to obtain it.</p></li><li>bring your own keyboard and know how to change a mac/linux/windows    machine's keyboard layout (or install one). I have not been typing in    a number of sessions because of this (try typing on a German mac    keyboard, when you are used to windows US layout!)</li></ul><h2 id="in_summary">In Summary</h2><p>It's a great event, you meet great people, and I would be surprised if  you came away from a code retreat not having learnt anything new.</p>
<hr><ol>
<li id="1">
    <strong><a href="http://www.blogger.com/profile/06671468907643091304">Adrian Bolboaca</strong></a> on <em>2012/09/21 10:44:14</em>: Thanks for the great write-up.<br/><br/>I have a kind of an answer for why I don't get to that session of change request. When I thought about the legacy code retreat and added a couple of sessions I wanted to have a more natural flow. I wanted to have this session also, sometimes in the end of the day. But as a facilitator I saw that the attendees do not really know the techniques so we are stuck into explaining the basics that they need in order to be able to handle a change request. During all the legacy code retreats I facilitated maybe the 7th iteration would have been the "change request constraint". <br/>I e-met Andreas and Nicole a couple early this year when we had a skype call about the legacy code retreat. Then I met them at the Socrates conference this year. I'm sure they are doing an excellent job as facilitators, and maybe they have some answers to this. My guess is that we need more legacy code retreats happening and only after a while when the attendees know better the basics we can start and introduce this session. Or maybe we can find together a solution on improving the current format.
<ol>
<li id="1-1">
    <strong><a href="http://pboop.wordpress.com/">pboop</strong></a> on <em>2012/09/23 16:44:45</em>: I agree with you. In my opinion a leagcy code retreat is about HOW to change the code not WHY or WHICH WAY in order to open room for a new requirement.<br/><br/>Every participant is free to let her/his imagination grow after (or even during) the retreat and play around with the code base, inventing new requirements and so on.
</li><li id="1-2">
    <strong><a href="/">Peter Zsoldos</strong></a> on <em>2012/09/30 17:11:58</em>: Thanks for the comment and sorry for the late followup.<br/><br/>I didn't intend that section as a criticism for the facilitators. Since it can be misread, I would appreciate if you could point out where and how, so I can correct it to avoid anyone else misunderstanding my intent (re-reading my post didn't help, I'm afraid I have too much context about what I wanted to say).
</li><li id="1-3">
    <strong><a href="/">Peter Zsoldos</strong></a> on <em>2012/09/30 17:12:58</em>: I don't know what the exact goal was behind creating the legacy coderetreat format. But I have always preferred learning not just a practice, but also its underpinning ideas and the limits of it. While I can practice refactoring on my own, there may not be someone around pointing out that not everything needs to be refactored. Both are important and have their places, and we seem to disagree about the latter. My thinking is influenced by seeing people (myself included) overdoing/overvaluing the latest pattern/practice they have came across (HelloWorldProxyFactoryImpl), without knowing the limits of their usefulness and knowing the difference between understanding something in theory versus doing that in practice - being told something is brittle/unreliable and understanding it on an intellectual level is very different from actually experiencing it. The latter tends to be easier to remember :)<br/><br/>But I might have fallen victim to offering a solution instead of raising a question. If the Nuremberg global code retreat will be a success, and there will be more following it, I'll be happy to immerse myself deeper into the code retreat community and see how I feel about this original idea after some time - one of the motivations for posting it was so that I can come back and revisit it later.
</li></ol></li></ol>
]]></content:encoded>
    </item>
    <item>
      <title>First impressions of the Gumotex Palava inflatable canoe</title>
      <link>http://zsoldosp.eu/2012/06/14/first-impressions-of-the-gumotex-palava-inflatable-canoe/</link>
      <pubDate>Thu, 14 Jun 2012 18:25:37 CEST</pubDate>
      <category><![CDATA[palava]]></category>
      <category><![CDATA[canoe]]></category>
      <category><![CDATA[review]]></category>
      <category><![CDATA[germany]]></category>
      <category><![CDATA[outdoors]]></category>
      <category><![CDATA[gumotex]]></category>
      <category><![CDATA[inflatable]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2012/06/14/first-impressions-of-the-gumotex-palava-inflatable-canoe/</guid>
      <description>First impressions of the Gumotex Palava inflatable canoe</description>
      <content:encoded><![CDATA[
<p>Our Palava arrived Friday the week before last, and since the weather was nice enough (warm, with patches of rain on Sunday), we immediately took it on a proper test ride on the Altmühl for the weekend, repeating an earlier trip we had on the same section of the river. Below I describe <em>why we chose</em> an inflatable, <em>how we chose</em> it, and <em>how it lived up to our expectations</em> (<a href="https://en.wiktionary.org/wiki/TL;DR" title="too long; didn’t read">tl;dr</a>: we like the boat).</p>
<p><img alt="" class="aligncenter size-medium wp-image-52" height="225" src="/2012/06/after-first-inflated.jpg?w=300" title="The Gumotex Palava after we've first inflated it" width="300"/>
<h2></h2>
<h2>Why did we buy a funny looking inflatable canoe?</h2>
Guess after having a <a href="/2012/03/22/dahon-bullhead-with-aerobars/" title="Dahon Bullhead with Aerobars">folding bike</a> this is the next logical step (anyone knows about <a href="https://en.wikipedia.org/wiki/The_Jetsons">Jetsons style folding cars</a>? :)) - just kidding...</p>
<p>While we have been canoeing for years, only moving to Germany made us think seriously about owning a canoe. The German canoe rental scene is rather different from what we were used to in Hungary, namely:
<ul>
<li>it requires more planning. You can't just decide in the morning that today you'd like to go paddling. Once we couldn't reserve a boat for the coming weekend on Thursday! Personalities aside (I've heard of people who like to plan their weekends in advance), even the weather forecast is not that reliable!</li>
<li>it's significantly more expensive. A two day canoe rental with transportation was €100 last year (varies with the vendor and the river, but a reasonable ballpark). Thus the <a href="http://www.gumotexboote.de/schlauchkanu-palava">Palava</a> (list price €629) pays for itself in seven weekends. In Hungary, the same ratio would be about 30-40 days of rental (ballpark figure).</li>
</ul>
Thus having our boat would financially makes sense (would pay for itself in the worst case in two seasons) and would give us freedom in our weekend/day off planning.
<h2>Choosing our canoe</h2>
We first considered a regular canoe, but quickly dismissed as being impractical for two people without a car (even with a car it's cumbersome and involves and additional train/bus ride to fetch the car from the start and then drive back down for the boat, potentially with one person waiting there). And if one didn't have a garage/garden, storage would be an extra problem.</p>
<p>Folding boats were also out of the question. A friend of mine has a folding kayak, and we didn't have a good experience with it: it is too heavy, takes up too much space to be carried without a car (and the actual design of the boat was too low seated, and thus it wasn't comfortable to paddle).</p>
<p>Inflatable kayaks - while they are cheaper and there are many models to choose from - were not an option either, since my girlfriend doesn't like kayaking :). Thus we were looking at inflatable canoes - fewer (<a href="http://www.grabner-sports.at/ADVENTURE-SL.adventuresl_x.0.html?&amp;L=2">Grabner</a> was the only other alternative we have found) and more expensive (guess the smaller market/demand explains it) choices. Thus we settled on the <a href="http://www.gumotexboote.cz/">Gumatex</a> brand.
<h2>Pre-Purchase Tests</h2>
Last year we met a retired couple who had a Palava, and they were kind enough to let us try it out (thanks again!). We concluded that it is a usable boat - and it's durable (they had it for about 10 years, only problem is now it has to be pumped a bit each day, while in the past it could go for days without). However, initially we were looking at the <a href="http://www.gumotexboote.de/schlauchkanu-scout">Scout</a>, for having a proper canoe shape. But it was pretty pricey for a blind purchase, thus we were searching for a way to try it out.</p>
<p>We found the opportunity by accident. The nice people at <a href="http://www.sport-schmidt-gmbh.de/">Sport Schmidt in Friedriechshafen</a> organized a test day in May, so we visited Lake Constance just for this occasion. Since it was there, we also tried the <a href="http://www.gumotexboote.de/schlauchraft-und-boot-baraka">Baraka</a>, but that is more suited for whitewater than the normal rivers we had in mind, so only the Palava is compared below with the Scout.
<ul>
<li><em>paddling comfort</em>: we kept rubbing our hands against the side of the Scout, which isn't pleasant. It might not be a problem for all - we are not tall (165/175 cms), and we have an unusual rear paddling style (normally I don't use the back seat of the canoe, but sit on the deck behind it - it provides a better line of sight and makes it easier to turn the boat. Maybe one gets used to it over time though, but the Palava - being much closer to the water - was a much more comfortable experience</li>
<li><em>turning</em>: compared to a solid canoe, both models turn crazy fast and easy - almost like a short kayak</li>
<li><em>going straight</em>: the Scout keeps direction almost like a normal canoe, but since I did two years whitewater kayaking and we have been canoeing for about 14 years, the Palava's ability is good enough for us</li>
<li><em>space</em>: the Scout has more of it, both for people and for luggage, however, even the Palava has enough for two people and gear (we had the bags we brought for the weekend for the test, with sleeping mats and bags, tent, dry/warm clothes, etc.), and we were comfortable and had space for even more bags (e.g.: two more backpacks would easily fit). We have seen pictures with two small kids and two parents without luggage in the Palava, but for touring (even longer ones, since the luggage for a week long trip is not much more than for a weekend trip) I'd say two people. The Scout is the family boat (or two Palavas :)</li>
<li><em>wind</em>: we couldn't test this, but we were somewhat concerned about how the Scout would handle wind, being light and being high out from the water. The Palava, with it's low height shouldn't be effected</li>
<li><em>weight</em>: both are light enough, so the hauling over dams and the like shouldn't be an issue. Plus with the many ropes on them, it's easy to move them alone.</li>
</ul>
In the end, we decided against the Scout. It's a great boat, but the Palava meets our needs, so the only two useful features of the Scout would be the shape and the straighter path. These are nice to have, but together with paddling discomfort we didn't feel paying almost double would be worth it.
<h2>The two days on the Altmühl &amp; impressions of the boat</h2>
This river doesn't really flow, and there are many dams that require hauling the boat (5 on the Treuchtlingen - Dollnstein (29km) and 3-4 on the Dollnstein-Eichstät (17km) section).</p>
<p>Putting the boat together is quick (<a href="http://www.gumotexboote.de/doppelhub-einhub-handpumpe-super-6-3">3L double chamber pump</a>) and intuitive, even when doing it for the first time. I wish the included bayonet-valve pump adapter had a loop (so we could secure it with a rope to the boat), but that's my only (and minor) complaint. One thing we should have purchased is a pressure gauge, but I expect we'll quickly get a feel for the right pressure. While talking about pumps: we've met a family with a <a href="http://www.sevylor-europe.com/p-73-hudson.aspx">Sevylor Hudson</a>, who were rather happy we had a pump they could use - they left theirs in the car, and the kayak somehow leaked air. Good reminder to always carry the pump in the boat!</p>
<p>Comparing the two Treuchtlingen - Eichstät trips (here is <a href="http://www.everytrail.com/view_trip.php?trip_id=1264633">last year's log with a rented canoe</a> and here is <a href="http://www.everytrail.com/view_trip.php?trip_id=1624079">this trip's</a>), with the inflatable - to our surprise - we ended up being faster by about half an hour (5.5 vs 6 &amp; 3.5 vs 4 hours) both days (even though last year it was raining heavily, so we were quite motivated). We assume it's because of the hauling - getting out, picking up the boat's backpack (about 80L drybag, which fits our 60L backpack and more easily), getting the boat out (beware: leaning forward with an 80L backpack is going to impact your balance :)), walking, putting it back on the water is essentially a non-operation, almost like just walking a bit to stretch your legs. And of course, we were familiar with the river already, so there were no navigation problems.</p>
<p>Paddling in the rear is somewhat harder - I did expect sour muscles in my back for the first canoeing of the year, but I was shocked to learn about the aching upper arm while attempting to drink a pint :) The boat turns quickly if you miss a beat or two, and thus much more corrections were needed. Also, I didn't have my custom made (by <a href="http://denescanoe.hu/">Denes Canoe</a>) paddle with me, and the standard size was just a bit too long for me in this boat.</p>
<p>Supposedly one should be on the knees in this boat, with support from the seat, but I've got bad knees and I anyway I need to switch positions in a normal canoe too, luckily, it's possible to sit normally too (though that's when you need a shorter paddle or get the sour muscles in the arm - or at least I did and suspect the normal sitting position is a contributor). The classic position (thighs almost horizontal, shins vertical) is unattainable, but not bad. My girlfriend felt totally comfy in the front, so it might be just me.</p>
<p>The ears have to be retrained, for the noises the boat makes when its scraping the bottom or a rock, but really few times does it do that - my non-scientific impression is that it copes well with really shallow water.</p>
<p>The backpack that comes with the boat is OK, but carrying the 22 kg over longer distances is no fun (but not a horrible experience either). There is no padding and chest/waist straps, which I missed - I've been spoiled by the <a href="http://over-board.co.uk/backpacks/waterproof-backpacks.html">great waterproof backpacks from OverBoard</a>. However, it's a solid waterproof bag. I wish it had reflective stripes on it, since we leave early/arrive late with the train, and thus for the walk it'd be useful. The bag is bigger than strictly needed, so both of our three piece paddles could be comfortably packed there too. The pump doesn't fit in however, and there isn't a proper external attachment point for it. But the boat is perfectly transportable, and we are really happy about it!</p>
<p>Packing away the boat takes about as long as a tent (plus the time required to clean it - and unless you had the time to properly dry it, it's worth drying it at home too).</p>
<p>In the end, the Palava met all our expectations - we had a great weekend canoeing!</p>
<hr><ol>
<li id="1">
    <strong><a href="">Rob Klaassen</strong></a> on <em>2012/11/27 11:02:12</em>: Yes, I've the same experience with the Palava in Norway, it`s great with 2+kid too (in his own inflatable chair!) and for 2 with a lot of luggage. Did you know its very durable cause it was developped for the army in Tjechie? Regards, Rob
</li><li id="2">
    <strong><a href="/category/outdoors/">zsepi</strong></a> on <em>2012/11/27 11:41:58</em>: Hey Rob,

thanks for confirming it accommodates a child as well - though I guess that wasn't what the military designers originally had in mind :)

Cheers,

Peter
</li><li id="3">
    <strong><a href="">Dan</strong></a> on <em>2013/07/06 16:00:12</em>: Great to read the above. Just ordered our Palava and it will arrive soon hopefully. We just had the same thoughts about spontaneous renting and storage problems, even though we have an own garage. Also the weight and complicated transportation of a regular canoe on the cars roof made the decission easy. After your report we are really excited to discover the palava on our own soon!
</li><li id="4">
    <strong><a href="/category/outdoors/">zsepi</strong></a> on <em>2013/07/08 09:22:58</em>: Dan, thanks for letting me know – I’m glad sharing my experience and thought process helped! Have fun with the new boat!
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Day 9: From Nagymaros to Budapest</title>
      <link>http://zsoldosp.eu/2012/05/02/day-9-from-nagymaros-to-budapest/</link>
      <pubDate>Wed, 02 May 2012 06:52:18 CEST</pubDate>
      <category><![CDATA[outdoors]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2012/05/02/day-9-from-nagymaros-to-budapest/</guid>
      <description>Day 9: From Nagymaros to Budapest</description>
      <content:encoded><![CDATA[
<p>Given that my current hosts didn't have other arrangements, a trip record was born - after a leisurely breakfast, cycling begun only after noon :)</p>
<p>One of my hosts decided that since she had to come to Budapest anyway, she might as well just bike instead of taking the train - thus I had company and the day's profile turned into a weekend cycling chat.</p>
<p>The weather was superb, and the cycling roads were quite crowded, but given the circumstances, it didn't bother me at all. With regards to the road quality - it isn't a smooth road, but has no cars, and the view is great. After Dunakeszi the road actually disappears (you should take the ferry to the right bank, there it continues), but having cycled this section many times I knew the back ways so we didn't have to take the #2 main road.</p>
<p>And then all of a sudden I was back in our flat in Budapest :)</p>
<p>It was 50 km with a net cycling time of 3:05 (h:mi). The gross time, of course, was much longer, but the ice cream break &amp; co. were essential and couldn't have been skipped :)</p>]]></content:encoded>
    </item>
    <item>
      <title>Day 8: From Gyor to Nagymaros</title>
      <link>http://zsoldosp.eu/2012/04/22/day-8-from-gyor-to-nagymaros/</link>
      <pubDate>Sun, 22 Apr 2012 07:36:19 CEST</pubDate>
      <category><![CDATA[outdoors]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2012/04/22/day-8-from-gyor-to-nagymaros/</guid>
      <description>Day 8: From Gyor to Nagymaros</description>
      <content:encoded><![CDATA[
<p>Managed to get an early start today, since my hosts had to leave around eight, and I preferred to be on the outside of the closed door (though they said I was free to choose...). After getting some munchies/bars/fruit for the day I was on the Eurovelo - again, which I promptly lost after leaving the inner city, but it goes along the car route 81 towards Tata. Actually, soon after getting out of the city, it goes on the road, and since it leads by the industrial district, there are tenwheeler trucks and lorries, and few signs.</p>
<p>Some kilometers before reaching Babolna, the Eurovelo takes a left to Nagyszentjanos, on a bad road, and in the village takes a right just before the railway crossing to a dirt road, seemingly only traveled (and travelable by) agricultural and offroad vehicles. I made the mistake of turning back and following the paved road, hoping to take the next right to Acs/Komarom, but there I was greeted with a traffic sign forbidding cyclists from the road - there and back an 8 km detour. So the dirt road. Incredibly slow and frustrating, but only lasts a few km and then a paved (though old and abandoned, and thus potholed) road emerges towards Acs. In the village center in the T-crossing take the left (there is an eurovelo sign, but not easy to find, and after the rails go to the right - just follow the signs for Komarom for the cars. Beware: high traffic road!</p>
<p>From here the signs are rare, but positioned at strategic locations, for some reason in the villages cyclist are forced off the road (which they rejoin just outside the village), which is painful with bags, since many of the forced alternatives are badly converted pedestrian roads, and there often isn't even a ramp at the crossing.</p>
<p>The car roads taken in order: 1, 117, 10, 11, mostly with traffic (there is one quality section road after Nyergesujfalu). The eurovelo crosses the danube at Pilismarot to Szob with a ferry (this time there was one every hour), but I continued to Visegrad on the 11, 'coz I haven't done this section of the road yet and because the friends I was staying that evening live in Nagymaros, with a ferry connection from Visegrad. Getting the bike up to their house in the hill was the most tiring!</p>
<p>Overall it was 141km in 6:40 (7:15). The road is ok if you can handle traffic, but otherwise (or with kids) I would suggest an alternative (maybe on the Slovakian side of the river) till Szob (visit Esztergom for sightseeing from Sturovo via the bridge), where the road is dedicated for cyclists, protected from car traffic (and has a great sight).</p>
<p>And probably was it not for catching up with friends I would have been in Budapest before daylight was out!</p>]]></content:encoded>
    </item>
    <item>
      <title>Da 7: From Vienna to Gyor</title>
      <link>http://zsoldosp.eu/2012/04/22/da-7-from-vienna-to-gyor/</link>
      <pubDate>Sun, 22 Apr 2012 07:11:44 CEST</pubDate>
      <category><![CDATA[outdoors]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2012/04/22/da-7-from-vienna-to-gyor/</guid>
      <description>Da 7: From Vienna to Gyor</description>
      <content:encoded><![CDATA[
<p>As indicated, my breakfast-addiction have developed, so just about a kilometer from the camping's entrance I had to stop for eating some eggs at Toni's...</p>
<p>The road from here to Bratislava is an old acquaintance, the surprises were that this time i didn't have to take a detour, but could cycle through oil-refinery in Lobau, which meant no dirt roads and was appreciated. The other thing was that this was the time I cycled this stretch alone, and have to say that the last 15-20 km straight road to Hainburg is a trying alone. There was headwind, but there always is on this section, so no problems there... Except that this time there were cyclist coming from the other direction, and they had backwind!</p>
<p>After reaching Bratislava, the usual can't-find-my-way-out-of-the-city begun, and the road signs have been underutilized so to speak, but people were helpful and many spoke German (lot of them even better than I do :), so I got out. Essentially, if you want to continue the Donauradweg, after reaching the first bridge just keep following the road straight ahead, with its turns, and after some time you reach the recreational area, where there are two roads, one up on the flood defense hills (whatever they are called), the other below, on the side away from the river. After two or three Imbisses chose the lower one since there I know there is a sign at the end of it (where the poles are preventing cars entering) saying Rajka - that's the first village in Hungary.</p>
<p>Take that road for four kilometers, and when you see a sign to the left advertising and adventure park, take the left - in this direction the sign is missing, and if you go further you reach a main Slovakian road with lots of traffic (though I saw people take that, but I rather turned back from there).</p>
<p>From here on, both the road and the sign quality drops significantly, and even the EuroVelo 6 makes a lot of detours, e.g.: after reaching Bezenye, it takes a right and you reach Mosonmagyarovar after going through Hegyeshalom (take a left on the main road, even though there are no signs) confusing, given the same road you took from Rajka to Bezenye continues straight to Mosonmagyarovar...</p>
<p>The cycling road is being built, so you have to go with the traffic, and the driving culture is really different here - with a bicycle you are treated as a second class citizen of the road, so be prepared to a lot of cars taking you over without giving you much side distance, and even not giving you the right of way when they should, e.g.: at pedestrian/cyclist crossings in towns, or when they do they might shout at you (it only happened the next day for me). It's inconvenient, but I only had to refresh my muscle memory - I have been cycling in Hungary for years...</p>
<p>In Hegyeshalom I waited for my friend to join me for the section to Gyor (I was staying at his place), and the we got lost together and cycled to the Bahnhof club/restaurant on the local beach for dinner (it's *not* at the railway station!).</p>
<p>The roads were pretty bad, with an occasional good section (the Slovakian road leading out from Bratislava - aside from the lack of signs - is awesome smooth &amp; flat!), but the weather was great (I have a sunburnt left ear to show :(). The sad part was that you really didn't see much of the Danube on this section...</p>]]></content:encoded>
    </item>
    <item>
      <title>Day 6: From Ybbs to Vienna</title>
      <link>http://zsoldosp.eu/2012/04/20/day-6-from-ybbs-to-vienna/</link>
      <pubDate>Fri, 20 Apr 2012 09:00:46 CEST</pubDate>
      <category><![CDATA[outdoors]]></category>
      <guid isPermaLink="false">http://zsoldosp.eu/2012/04/20/day-6-from-ybbs-to-vienna/</guid>
      <description>Day 6: From Ybbs to Vienna</description>
      <content:encoded><![CDATA[
<p>One good thing about staying at an Inn overnight id the breakfast: there is plenty!</p>
<p>There were two other cycling parties at the Inn, either it is that Austrians are sportier, or simply I was the only one who didn't get the memo about the start of the good weather and by now the German section is already full with touring people.</p>
<p>Personal record: managed to take the wrong turn just about 2.5kms after start :)</p>
<p>The road to Melk, then Kremms is pretty, leading through small villages among grapefields, and since we've cycled here 3 years ago, memories were popping up almost everywhere. Though on the flip side I was dreading the section where my tire exploded back than. And no, I am not superstitious :)</p>
<p>Here have I met the oldest cyclist of the tour - he already had shaking hand, but was going full straight when cycling. Sheldon Brown came to mind.</p>
<p>After Kremms finding the way to the bridge was a bit difficult again, and now came a boring, shaky section along the Danube - you know the kind of road that has thin cracks across its whole width every 10-15 meters? One can still do a decent speed, but it is definitely not pleasant...</p>
<p>Tulln surprised me with its logo for the Garden festival - says a lot about me that on seeing a bleu-green small 'g' all I can think is Google...</p>
<p>Unlike last time, I crossed to the left bank at the power plant before Vienna, remembering how bad the road was last time. And I can definitely suggest to enter Vienna on the left - pretty cool.</p>
<p>One problem though is that it's easy to loose the Radweg signs, but it doesn't hurt - just keep going along the Neues Donau (New Danube). The bigger issue though is that the camping is not marked anywhere, and locals of course have no clue where campings are. When asking for directions, ask about Ölhaus and Lobau (but don't go all the way to Lobau!). If you see Toni's Inselgrill, turn back and take the first exit to the right, cross the road at the pedestrians crossing, and go up the hill (there arwe signs for the cars).</p>
<p>Anyhow, that was 156 km in about 7:20. Now on to Gyôr (just finished breakfast at Toni's).</p>]]></content:encoded>
    </item>
  </channel>
</rss>
